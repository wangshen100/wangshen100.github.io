<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/03/The-Self-Cultivation-of-Programmers/"/>
    <url>/2025/09/03/The-Self-Cultivation-of-Programmers/</url>
    
    <content type="html"><![CDATA[<h3 id="The-Self-Cultivation-of-Programmers"><a href="#The-Self-Cultivation-of-Programmers" class="headerlink" title="The Self-Cultivation of Programmers"></a>The Self-Cultivation of Programmers</h3><p>程序员的自我修养(链接和动态库) </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录:"></a>目录:</h1><ul><li><p>第1部分 简介</p><ul><li><p>第1章 温故而知新</p><ul><li><p>1.1 从HELLO WORLD 说起</p></li><li><p>1.2 万变不离其宗</p></li><li><p>1.3 站得高，望得远</p></li><li><p>1.4 操作系统做什么</p></li><li><p>1.5 内存不够怎么办</p></li><li><p>1.6 众人拾柴火焰高</p></li></ul></li></ul></li><li><p>第2部分 静态链接</p><ul><li><p>第2章 编译和链接</p><ul><li><p>2.1 被隐藏了的过程</p></li><li><p>2.2 编译器做了什么</p></li><li><p>2.3 链接器年龄比编译器长</p></li><li><p>2.4 模块拼装——静态链接</p></li></ul></li><li><p>第3章 目标文件里有什么</p><ul><li><p>3.1 目标文件的格式</p></li><li><p>3.2 目标文件是什么样的</p></li><li><p>3.3 挖掘SIMPLESECTION.O</p></li><li><p>3.4 ELF 文件结构描述</p></li><li><p>3.5 链接的接口——符号</p></li><li><p>3.6 调试信息</p></li><li><p>3.7 本章小结</p></li></ul></li><li><p>第4章 静态链接</p><ul><li><p>4.1 空间与地址分配</p></li><li><p>4.2 符号解析与重定位</p></li><li><p>4.3 COMMON 块</p></li><li><p>4.4 C++相关问题</p></li><li><p>4.5 静态库链接</p></li><li><p>4.6 链接过程控制</p></li><li><p>4.7 BFD 库</p></li><li><p>4.8 本章小结</p></li></ul></li><li><p>第5章 WINDOWS PE&#x2F;COFF</p><ul><li><p>5.1 WINDOWS 的二进制文件格式PE&#x2F;COFF 134</p></li><li><p>5.2 PE 的前身——COFF</p></li><li><p>5.3 链接指示信息</p></li><li><p>5.4 调试信息</p></li><li><p>5.5 大家都有符号表</p></li><li><p>5.6 WINDOWS 下的ELF——PE</p></li><li><p>5.7 本章小结</p></li></ul></li></ul></li><li><p>第3部分 装载与动态链接</p><ul><li><p>第6章 可执行文件的装载与进程</p><ul><li><p>6.1 进程虚拟地址空间</p></li><li><p>6.2 装载的方式</p></li><li><p>6.3 从操作系统角度看可执行文件的装载</p></li><li><p>6.4 进程虚存空间分布</p></li><li><p>6.5 LINUX 内核装载ELF 过程简介</p></li><li><p>6.6 WINDOWS PE 的装载</p></li><li><p>6.7 本章小结</p></li></ul></li><li><p>第7章 动态链接</p><ul><li><p>7.1 为什么要动态链接</p></li><li><p>7.2 简单的动态链接例子</p></li><li><p>7.3 地址无关代码</p></li><li><p>7.4 延迟绑定（PLT）</p></li><li><p>7.5 动态链接相关结构</p></li><li><p>7.6 动态链接的步骤和实现</p></li><li><p>7.7 显式运行时链接</p></li><li><p>7.8 本章小结</p></li></ul></li><li><p>第8章 LINUX 共享库的组织</p><ul><li><p>8.1 共享库版本</p></li><li><p>8.2 符号版本</p></li><li><p>8.3 共享库系统路径</p></li><li><p>8.4 共享库查找过程</p></li><li><p>8.5 环境变量</p></li><li><p>8.6 共享库的创建和安装</p></li><li><p>8.7 本章小结</p></li></ul></li><li><p>第9章 WINDOWS 下的动态链接</p><ul><li><p>9.1 DLL 简介</p></li><li><p>9.2 符号导出导入表</p></li><li><p>9.3 DLL 优化</p></li><li><p>9.4 C++与动态链接</p></li><li><p>9.5 DLL HELL</p></li><li><p>9.6 本章小结</p></li></ul></li></ul></li><li><p>第4部分 库与运行库</p><ul><li><p>第10章 内存</p><ul><li><p>10.1 程序的内存布局</p></li><li><p>10.2 栈与调用惯例</p></li><li><p>10.3 堆与内存管理</p></li><li><p>10.4 本章小结</p></li></ul></li><li><p>第11章 运行库</p><ul><li><p>11.1 入口函数和程序初始化</p></li><li><p>11.2 C&#x2F;C++运行库</p></li><li><p>11.3 运行库与多线程</p></li><li><p>11.4 C++全局构造与析构</p></li><li><p>11.5 FREAD 实现</p></li><li><p>11.6 本章小结</p></li></ul></li><li><p>第12章 系统调用与API</p><ul><li><p>12.1 系统调用介绍</p></li><li><p>12.2 系统调用原理</p></li><li><p>12.3 WINDOWS API</p></li><li><p>12.4 本章小结</p></li></ul></li><li><p>第13章 运行库实现</p><ul><li><p>13.1 C 语言运行库</p></li><li><p>13.2 如何使用MINI CRT</p></li><li><p>13.3 C++运行库实现</p></li><li><p>13.4 如何使用MINI CRT++</p></li><li><p>13.5 本章小结</p></li></ul></li></ul></li></ul><p> </p><p><img src="/media/image1.png">{width&#x3D;”13.32638888888889in”<br>height&#x3D;”8.256944444444445in”}</p><p> </p><p>第二步:用自己的理解表达出来</p><p><strong>第一章 温故而知新</strong></p><ul><li><p><strong>计算机体系结构</strong></p><ul><li>计算机最关键的三个部件是 CPU、内存、I&#x2F;O 控制芯片。早期 CPU、内存和<br>I&#x2F;O 控制器都连接在一根总线(bus)上，现代计算机则通过<br>PCI（北桥）连接高速设备，如内存、高速图形设备等，通过<br>ISA（南桥）连接低速设备，如磁盘、USB、键盘、鼠标等。为了提高CPU频率的速度(频率最多到达4Ghz--物理极限),才用SMP(symmetrical<br>Multi-Processing)<br>对称多处理器(适用于处理多个独立的任务),但使用多处理器成本比较高(缓存),因此让这些处理器公用一个缓存,只保留多个核心,这就是多核处理器(multi-processor)</li></ul></li><li><p><strong>系统软件</strong></p><ul><li><p>平台类系统软件包括操作系统、驱动、运行库；工具类系统软件包括编译器等。计算机科学领域很多问题可通过增加中间层解决(比如虚拟机)，如运行库提供应用程序编程接口供应用调用，运行库又调用操作系统内核提供的系统调用接口，系统调用常以软中断形式提供，如<br>Linux 中断号是 0x80。</p></li><li><p>硬件是硬件接口的定义者，操作系统是硬件接口的使用者，硬件规格文档规定了硬件编程接口，操作系统和驱动程序开发者据此编写程序。</p></li></ul></li><li><p><strong>操作系统</strong></p><ul><li><p>操作系统的主要功能要给是提供抽象接口,另外就是管理硬件资源(进程调度),计算机性能有限,因此需要费心思利用好这些硬件资源,资源主要分为:CPU,存储器(内存和磁盘)以及I&#x2F;O设备</p></li><li><p>为了不让CPU空闲时间太长,如果CPU按顺序只执行一个程序,当程序不用到CPU的时候,其他程序也无法用到CPU,导致CPU空闲,因此操作系统经历了多道程序(监控程序,当某个程序不用CPU时,就把另外正在等待CPU资源的程序启动)、分时系统(程序运行一段时间后主动释放CPU权限)、多任务系统(每个应用程序都是一个进程,有自己独立的运行空间和环境,通过抢占式分配CPU资源,即如果进程运行超过一段时间,操作系统就会暂停该进程,讲CPU资源分配给其他正在等待的进程)的发展阶段。多任务系统中，操作系统接管硬件资源，应用程序以进程方式运行，进程地址空间相互隔离，操作系统根据优先级分配<br>CPU，通过时间片分配运行时间。</p></li><li><p>操作系统作为硬件上层,他希望看到的是一个统一的硬件访问模式.<br>因此硬件也逐渐被抽象为一系列的概念. UNIX<br>设备被抽象成文件,将硬件细节交给硬件驱动模块(跟内核一起运行在特权级)来完成，Windows<br>中图像设备抽象成 GDI，声音和多媒体抽象成<br>DirectX，磁盘被抽象成普通文件。硬盘基本存储单位为扇区(每个扇区512字节,数据按照链式存储,才用LBA技术实现逻辑扇区号的划分)，操作系统通过调用驱动接口操作硬件，如读取文件时驱动程序将信息写入<br>I&#x2F;O 端口寄存器，CPU 通过 in 和 out<br>命令读写硬件端口。<a href="https://zhuanlan.zhihu.com/p/439770090">[看一遍就理解：IO模型详解]{.underline}</a></p></li></ul></li><li><p><strong>内存管理</strong></p><ul><li><p>为了更高效利用硬件资源,我们必须同时运行多个进程,早期是通过直接将有限的物理内存分配给多个程序使用,因此存在1.地址空间不隔离(所有进程都可以访问物理地址,容易改写其他进程的内存数据)、2.使用效率低(因为内存容量有限,一些存储在磁盘的进程要执行就要将已经在内存中的进程先写回磁盘中,导致高频的进程换入换出)、3.地址容易变化(每次程序装入内存运行需要向内存申请足够大的空间,因此地址不确定,但程序编写时,数据和指令的目标地址是固定的,导致了每次装载后都要重定位)等问题，通过增加虚拟内存中间层解决。操作系统维护进程虚拟内存和物理内存的对应关系，保证进程间地址空间隔离，将虚拟地址空间映射到物理地址空间,物理地址空间是实在的,虚拟地址空间是虚拟的,进程在虚拟空间中执行,每个进程都有自己独立运行的虚拟地址,就能有效做到进程隔离。那么物理地址和虚拟地址之间的映射关系是怎么样的呢?请看下节</p></li><li><p>分段(Segmentation):把一段与程序所需要的内存空间大小的虚拟地址映射到某个物理空间,比如虚拟空间的0x0000~0x2000被映射到物理地址的0x10000~12000上,那么进程访问虚拟空间0x1000的地址,CPU就会将这个地址转换为0x11000进行访问,这样进程就不需要关心物理地址的变化,只需要按照虚拟空间编写代码即可(不需要重定位).但这种映射方法还是比较粗糙,因为还是按照进程为单位映射的,不能解决内存中频繁换入换出的问题,关系如下图:</p></li></ul></li><li><p>分页:根据程序的局部性原理,当一个程序在运行时,在某个时间段只会频繁的用到一部分数据,其他数据其实不会被用到,因此我们想到了用更小粒度的内存分割和映射的方法,使得程序的局部性原理得到充分利用,增加内存的使用率,这就是分页的思想,分页的基本方法是将地址空间人为分成固定大小的页(page),页的最小的空间由硬件决定,,页实际大小由操作系统决定,默认4K&#x2F;4M为1页,同一时刻只能选择一种规格大小的页,对于操作系统来说,页的大小是固定不变的,虚拟空间和物理地址空间使用同一种页的分割方法.我们将程序中的虚拟内存按页的方式进行分割,把常用数据和代码页装载到物理内存中,,把不常用的页保存在磁盘中,等用到的时候再从磁盘取出来,,我们把在虚拟空间的页叫虚拟页(Virtual<br>Page),把物理内存中的叫做物理页(Physical<br>Page),存储在磁盘中的页叫磁盘页(Disk<br>Page),下图为示例的映射关系,如果多个虚拟内存页(VP)被映射到同一物理页(PP),则称为内存共享.</p></li><li><p>上面的VP2和VP3没有实际放到内存中,因此当进程需要用到这两个页的时候,硬件会捕获到这个消息(页错误),然后系统接管进程,负责将VP2&#x2F;VP3从磁盘装入到内存,建立物理内存页和虚拟内存页的映射关系,因为硬件本身就支持这种以页为单位的读写操作,因此存取和交互这些数据很方便,当然虚拟存储的实现需要靠硬件支持,这个硬件是MMU(Meory<br>Management Unit)来进行页映射</p></li><li><p><strong>线程</strong></p><ul><li>线程又称轻量级进程，是程序执行的最小单元.由线程<br>ID、当前指令指针（PC）、寄存器集合以及堆栈组成，线程之间共享数据段、代码段、堆、打开的文件、信号等。多线程可提高程序执行效率，降低阻塞概率，发挥多核<br>CPU 能力，线程间通信更高效。结构如下图:</li></ul></li></ul><blockquote><p><img src="/media/image6.png">{width&#x3D;”6.291666666666667in”<br>height&#x3D;”5.770833333333333in”}</p></blockquote><ul><li>为什么要使用多线程?使用他的好处是什么?线程的访问很自由,它可以访问进程内存中的所有数据,设置包括其他线程的堆栈,并且线程也有自己的私有存储空间.线程总是</li></ul><blockquote><p>并发执行,当线程数量小于多处理器数量的时候,线程的并发是真正的并发,他们运行在不同处理器上,彼此互不干扰,,但当线程数量大于处理器数量(大多数情况下都会发生),就会出现</p><p>一个处理器上处理多个线程的情况;因此对于单核处理器,多线程是模拟出来的,它是让线程轮流执行一小段时间,让其看起来像同时执行.在同一处理器上对不同线程进行切换的行为称为&quot;线程调度&quot;,在线程调度中,线程通常由三种状态,分别是运行(running),就绪(ready),等待(Waiting),处于运行态的线程拥有一段可以持续执行的时间,这段时间称为&quot;时间片&quot;,当时间片用尽,他就会进入就绪态,如果时间片没用尽就开始等待某个时间,那就进入等待态,每当一个线程离开运行态,调度系统就会选择一个处在就绪态的其他线程继续执行,当处于等待态的线程等待的事件发生后,线程就进入就绪态.</p><p>线程调度系统的调度方案由很多种,主流的大多带有优先级和轮询的概念,轮询就是让各个线程都轮流执行一段时间的方法,这决定了线程之间交错执行的特性,而优先级系统决定线程按照什么顺序执行.高优先级的线程可以更早的被执行,线程优先级不仅可以被用户手动配置,系统会根据线程的表现自动调整优先级,使得调度更有效率,通常情况下,频繁进入等待状态的线程(主动进入等待状态,会放弃运行中剩余的时间片份额)比频繁进行大量计算的线程(每次都要把时间片用完)优先级更高,因为I&#x2F;O密集型(频繁进入等待)往往只占用CPU很少的时间,而CPU密集型(进行大量运算)则总会把时间片用光,但优先级过低的线程容易被饿死(总是被优先级高的线程抢占资源,导致一直无法执行),因此为了避免线程饿死,调度系统会逐步提升那些等待时间过久不能得到执行的线程的优先级,在这样的方式下,一个线程只要等待的够久,就一定会执行.</p></blockquote><ul><li>线程 &#x2F;<br>进程调度有运行、就绪、等待三种状态(如上图)。当运行态的线程时间片用尽,就会被强制剥夺CPU使用权,并进入就绪状态(抢占式).在linux上,没有线程的概念,task(任务)等价于线程,共享同一个数据内存空间的多个Task构成了一个进程,linux可以通过3种方式创建task:Fork的速度快,与原任务共享一个写时复制(Copy<br>on<br>Write,多个任务可以自由的读取同一块内存,但当其中一个task试图对其进行修改的时候就会复制一份副本给修改方task进行修改,不影响其他任务继续读取使用)的内存空间,fork需要配合exec才能启动别的任务,如果要产生新线程,就需要用到Clone</li></ul><blockquote><p> </p></blockquote><ul><li>线程安全方面，线程因为过于灵活,导致多线程同时访问全局变量或者堆数据,很容易出现并发冲突或者竞争冒险,因此保证并发时数据一致性就很重要.如下图,预期线程1和线程2执行完后,i&#x3D;&#x3D;1,但实际结果可能是i&#x3D;2&#x2F;i&#x3D;0;自增&#x2F;减操作出现错误的原因是因为被分为多条指令执行,如果线程执行一半被其他线程打断,就会出错.为了避免出错,我们把单指令的操作称为原子操作,即不会被调度系统打断,很多体系都提供了一些常用的原子指令,使用这些函数就不用担心出现抢占问题.如下:</li></ul><blockquote><p><img src="/media/image12.png"></p></blockquote><ul><li>原子操作适用于简单特定的场景,在复杂场景下要保证一个复杂数据结构具有原子性,显然不大合理,因此我们就要引入更通用的手段---涉及同步与锁的概念，我们需要将各个线程对同一数据的访问进行同步,即一个线程对该数据访问还未结束,那其他线程就不得对同一数据进行访问,这样,这个数据的访问就原子化了.同步最常见的就是锁(Lock),他是一种非强制机制,每个线程访问共享资源前会试图获取(Acquire)锁,并在访问结束后释放(release),当锁被占用时,如果由其他线程试图获取锁,就进入等待,知道锁被释放,重新可用.锁的种类由很多,</li></ul><blockquote><p>如二元信号量Binary<br>semaphore(只有两种状态,适用于只能被唯一一个线程独占的资源,比如第一个线程获取锁,第二三个想获取就等待第一个访问完,之后第二个,第三个线程访问完,释放锁,这里要注意的是,第一个线程获取锁,第三个线程释放锁,不同线程对二元信号量的获取&#x2F;释放是合法的)、</p><p>信号量semaphore(允许多个线程并发访问),</p><p>互斥量Mutex(与二元信号量很相似,但它要求哪个线程获取了互斥量就只能这个线程进行释放锁,其他线程去释放这个锁是无效的)</p><p>临界区Critical<br>Section(比互斥量更严格,临界区作用访问仅限于本进程,其他进程无法获取锁)</p><p>读写锁Read-Write<br>Lock(如果多线程只是为了读取,那不用管,如果有一个要进行修改就要用同步手段)</p><p>条件变量Condition<br>Variable(类似于水阀,多个线程可以等待条件变量,在某一时刻条件变量被唤醒,这时候线程恢复执行)等。可重入函数是并发的强力保障，具有不使用或返回静态或全局非<br>const<br>变量、仅依赖调用方参数、不依赖单个资源的锁(如互斥锁)、不调用不可重入函数等特征,一个函数被重入表示这个函数还没有执行完成(一般是多个线程同时执行这个函数,或者函数自己本身的递归调用).</p></blockquote><p> </p><p> </p><ul><li>线程模型:内核线程与Kernel_thread并不是同一回事,用户态的用户线程也不一定与内核态的内核线程一致,他们由三种映射关系</li></ul><blockquote><p>一对一模型:是真正的并发,但内核线程数量受到操作系统限制进而导致用户线程也被限制,频繁切换内核线程调度,上下文切换开销大,导致性能下</p></blockquote><p>多对多模型:多数用户线程映射到少数内核线程,这样一个内核线程阻塞不会导致所有用户进程阻塞,并且用户线程数量也不受限制,但性能没有一对一模型高</p><p><strong>第二章 编译与链接</strong></p><ul><li><p><strong>编译过程</strong></p><ul><li><p>预处理(Propressing)：处理源代码中以 “＃” 开头的预编译指令，如去除<br>#define 展开宏定义、处理 #if 等条件编译指令、处理 #include<br>指令(可递归)插入被包含文件、添加行号和文件名标示、保留 #pragma<br>编译器指令。预编译程序:cc1</p></li><li><p>编译汇编(Compiliation<br>)：对预处理完的文件进行词法分析、语法分析、语义分析及优化，生成汇编代码文件。词法分析将字符分割成记号，语法分析产生语法树，语义分析检查语句意义，现代编译器还会进行中间代码生成和目标代码优化。</p></li><li><p>汇编(Assembly)：将汇编代码转变成机器可执行的指令，产生目标文件。汇编器:as</p></li></ul></li></ul><blockquote><p> </p></blockquote><ul><li><p><strong>链接(Linking)过程</strong></p><ul><li><p>链接的主要工作包括地址和空间分配、符号决议和重定位。早在高级语言发明之前就存在链接的概念(最开始是用人力计算修正)，随着汇编语言的发展，代码量增大，程序被分割成多个模块，模块间通过符号引用进行通信(通过符号命名子程序或者跳转目标)，链接就是通过符号引用来拼接各个模块的过程。链接器:ld</p></li><li><p>基本的静态链接由目标文件（.O<br>文件）和静态库链接而成，在链接时，对于调用其他模块中函数或变量的情况，由于单独编译不知道其具体地址，所以先空出地址，等待链接器根据符号找到确切地址后填入，这个过程就是重定位，每个被修正的地方叫做一个重定位入口。链接后的文件才是可执行文件(所有地址都被确定)</p></li><li><p>现代大型软件开发动辄几百万行代码,如果都放在一个模块里面,维护和开发的难度是难以想象的,因此会根据具体功能区分处大大小小的模块(中间目标文件),这些模块相互依赖又相互独立,这些模块如何组合成单一程序(可执行文件)?这就是链接的魅力---将各个模块引用的部分处理好并进行正确衔接(符号决议&#x2F;符号绑定)</p></li></ul></li></ul><p><strong>第三章 目标文件</strong></p><ul><li><p><strong>目标文件格式与结构</strong></p><ul><li>在 Linux 下目标文件为 ELF（Executable Linkable Format）文件，Windows<br>下主要为 PE（Portable Executable）格式，它们都是 COFF<br>格式的变种。(不光可执行文件,动态链接库(.so&#x2F;.dll)静态链接库(.a&#x2F;.lib)也是按照这个格式存储的)</li></ul></li><li><p>目标文件(.o文件)中含有编译后的机器指令代码、数据还有一些链接时需要的符号表、字符串等，这些信息按属性以段（Section）的形式存储。一般会在文件头(段表地址)描述整个文件的基本属性(链接方式是静态还是动态,入口地址,文件是否可执行),例如,.text&#x2F;.code<br>经常用来放编译后的机械指令(代码段),.data<br>段(数据段)存放已经初始化的全局变量和局部静态变量(分为大端对齐或者小段对齐)，.bss<br>段存放未初始化的全局变量和局部静态变量或者初始化为 0 的（全局变量 &#x2F;<br>局部静态变量）的大小总和,一般只预留位置,没有内容,因此不算入占用空间。</p></li><li><p>程序指令和程序数据分开存放的原因包括：代码段对于进程只读，数据段可读可修改，分开设置不同权限可防止指令被恶意修改；CPU<br>缓存有数据缓存和指令缓存，分开存储可提高缓存命中率；同一个程序的多个副本进程的程序指令相同，运行时内存中只需一份只读的指令，可节省内存。而私有数据可以根据副本个数分开存放,互不干扰,它在动态链接系统中,节省了大部分内存</p></li></ul><p><strong>第四章 空间与地址分配</strong></p><ul><li><p><strong>空间与地址分配原则</strong></p><ul><li>链接时扫描所有目标文件，将相同段合并，收集符号定义与引用。链接后的<br>VMA（Virtual Memory<br>Address，虚拟内存地址）就是进程空间中的虚拟地址。LMA(Load Memory<br>address),两个地址正常情况下要一致,因此链接过程中我们只需关注VMA +<br>offset和SIZE即可.可以看到,链接之前,所有段的VMA都是0,但要是链接为可执行文件,那VMA的默认地址就要从0x8048000开始分配</li></ul></li><li><p><strong>符号解析与重定位</strong></p><ul><li>段表(Section<br>table)用来描述程序各个段的在文件中的偏移位置或者属性,它是保存了这些段的基本属性的数据结构(段名,段长,偏移量,读写权限等),是除了文件头之外最重要的结构.</li></ul></li></ul><blockquote><p>编译,链接器,装载器就是通过段表来定位和访问各个段的,比如上面的文件头力段表的位置在0x118.文件头描述有11段,我们通过readelf看到确实段表有11个成员,其中第一个是无效的段描述符(NULL),所以有效的段只有10个,字符串表主要保存ELF文件中用到的函数名,变量名等普通字符串,使用偏移来引用字符串(&#39;&#x2F;0&#39;分隔单词),注意到第8个成员,表示段名字符串表,我们通过ELF头文件就能解析出段表和段表字符串表(保存段名)位置,进而解析出所有段的信息</p></blockquote><ul><li>链接过程实际上是把多个不同的目标文件按照一定规则相互连接在一起,这个规则(粘结剂)就是目标地址之间对函数和变量地址的引用(比如A文件定义了test,B文件引用了test),要注意的是,变量和函数要唯一,不然连接过程会发生混淆.我们把函数和变量统称为符号;可执行文件的符号表(Symbol<br>table)信息，记录着目标文件用到的所有符号,每个定义过的符号都会有一个对应的值(符号值也可以称为地址),符号表主要有1.定义在本目标文件的全局符号<br>2.本目标文件引用的全局符号 3.局部符号<br>4.行号信息这几类,链接过程一般关注全局变量即可,符号表也是文件中的一个段,用&quot;.symtab&quot;表示,我们可以使用nm指令来查看符号结果,如下图:(一般我们只需要关注函数和前缀为global的变量)</li></ul><blockquote><p>除了上面这些符号,系统还会定义一些特殊符号,这些符号可能没有在文件中定义,但你可以直接声明并引用它(它已经被定义在链接器脚本中,所以可以在代码里面直接使用);</p><p>C++的链接会更麻烦,涉及到符号签名和extern &quot;C&quot;(因为C++的狗屎机制)</p><p>强符号和弱符号:未初始化的全局变量在目标文件中为弱符号，不会在 BSS<br>段分配空间而是标记为<br>COMMON，因为它是全局变量，可能在其他编译单元有定义，甚至类型大小更大，所以只有到最后链接阶段才确认其大小并在输出文件的<br>BSS 段为其分配空间，也可添加属性强制让未初始化全局变量不被标记为<br>COMMON，使其成为强符号,默认函数和已经初始化的全局变量为强符号,有如下规则:</p><p> </p></blockquote><ul><li><p>通过扫描所有输入目标文件,获得他们各个段的长度属性和位置,并将符号表中的所有符号收集起来,统一放到全局符号表,经过段拼合之后，各个段的虚拟空间地址已被分配，建立映射关系,(核心:重定位)然后根据各个符号原先在目标文件段中的偏移地址计算出虚拟空间地址。重定位表中记录了目标文件中需要重定位的符号在段中的偏移地址，通过与段的虚拟空间地址计算得出需要重定位的实际地址并对引用的地方进行修正(绝对地址修正和相对地址修正)。最终多个目标文件组合成一个可执行文件.(静态链接流程)</p></li><li><p>链接控制脚本:如果我们没有指定链接脚本,ld会使用默认链接脚本,如果用户想控制链接过程来获得特定的链接文件,一般用三种方法:</p></li></ul><blockquote><p>1.使用命令行给链接器指定参数 ld -o -e</p><p>2.将链接指令放在目标文件中</p><p>3.使用链接控制脚本(最灵活,最强大的控制方法),这种脚本也称为模块自定义文件(.def)</p><p>链接脚本语言语法继承AT&amp;T链接器指令,本身并不复杂,语句分为两种,一种是命令语句,一种是赋值语句.结构跟C语言类似</p></blockquote><ul><li><p>语句之间使用分号作为分隔符&quot;;&quot;,赋值语句跟C一致,命令语句一般由一个关键字紧跟后面参数组成如<br>ENTRY 0x0800</p></li><li><p>表达式和运算符与C一致(+,-,*,&#x2F;,&#x3D;) 赋值语句: .&#x3D;0x08480000 +<br>SIZEOF_HEADERS(&quot;.&quot;为当前位置计数器,SIZEOF_HEADERS为</p></li></ul><blockquote><p>程序头部大小),这条语句的作用是用来指定代码在内存中加载&#x2F;运行的位置,并跳过头部信息,避免将其覆盖</p></blockquote><ul><li>注释和字符引用:注释:&#x2F;**&#x2F; 引用:&quot;&quot; 双引号</li></ul><blockquote><p>以下列出几种常用的命令,除了这些指令还有最复杂的SECTIONS指令,其他命令请见ld的使用手册:</p></blockquote><p><strong>第五章 链接器与库</strong></p><ul><li><strong>可执行文件的装载以及进程</strong></li></ul><blockquote><p>可执行文件只有装载到内存中才能继续被CPU执行,基本过程就是把程序从外部存储器读取到内存中的某个位置,随着硬件MMU的诞生,多进程多用户虚拟存储的操作系统出现,可执行文件的装载系统</p><p>变得十分复杂,其中包括覆盖,装载,页映射,以及为什么进程需要有自己独自运行的虚拟空间.代码段数据段堆栈在进程地址空间的分布规则等等.</p></blockquote><ul><li><p>对于静态链接,最常见的方法是直接将各个目标文件进行合并,按次序叠加进行空间排布,但这样会出现一个问题--会出现很多零散的段,而这些零散的段,因为要考虑到对齐(4KB),就会非常浪费空间(大量内部碎片),因此出现了另一种组合方案相似段合并,即将所有中间目标文件的text段合并一起输出到可执行文件的.text段,</p></li><li><p>例如一个C语言运行库中,它由成百上千的语言源代码组成,因此如果将这些零散的目标文件直接提供给库的使用者,很容易造成文件传输管理和组织的不便,因此人们通常将这些目标文件压缩到一起(libc.a<br>包含了1400个目标文件),并对齐进行编号和索引(但这也导致文件偏大,有些无用的功能也被打包,因此常常将每个函数独立放在一个目标文件中,这样在链接的时候就可以单独只链接需要的目标文件,避免将无用的函数链接到可执行文件中)</p></li></ul><blockquote><p>做个比喻:程序相当于菜谱,CPU相当于厨师,厨具则是计算机的其他硬件,整个炒菜的过程就是一个进程,计算机按照程序将输入数据加工成输出数据,就好比人按照菜谱将</p><p>一堆食材加工成美味的一道料理,当然一个菜谱可以有多个厨师一起协同合作完成同一道菜(多线程).</p><p>我们知道,进程运行在独立的虚拟地址空间,这个空间的大小是由计算机硬件平台决定的(32bit&#x2F;64bit),从程序的角度来看,我们可以从C语言指针所占的空间来计算虚拟地址</p><p>空间的大小(比如32bit系统指针的大小为4byte),那么假设在32位平台上的4G虚拟空间我们的进程可以任意使用吗?显然是不行的,因为进程受到操作系统监管,因此进程只能</p><p>使用操作系统分配给进程的地址,方便操作系统监控,如果进程访问未经允许的空间,那么操作系统就会捕获这个非法操作并强制结束进程.(Segmentation<br>Fault)</p><p>那么进程的虚拟地址空间是怎么分配的呢?操作系统会将地址空间分为两部分:一部分给操作系统本身使用比如0xC0000000~0XFFFFFFFF共1G空间,剩下的0x00000000~</p><p>0xBFFFFFFF共3G空间都是给进程使用,因此,理论上讲,进程最多可以使用3G的虚拟空间,那么32位平台能使用超过4GB的空间吗(可以---PAE).PAE的方法是讲原先的32bit地址线</p><p>拓展至36bit地址线,并修改页映射,使得新的映射方式可以访问更多的物理空间(64G).比如一个进程申请一段256MB的虚拟地址使用,他就可以从高于4GB的物理空间中申请多个</p><p>大小为256MB的物理空间,编号为A,BC,D(窗口标识).然后映射到不同的物理空间块(不直接映射到虚拟地址,而是通过页帧号(标记物理内存位置)进行区分),使用A则表示0x10000000~0x2000000这一窗口,用到B则使用0x20000000~0x30000000窗口,以此类推(AWE&#x2F;Mmap)</p></blockquote><ul><li>最简单的装载方式就是把程序所有的指令和数据都装入内存中,这种方式叫做静态装入,但这种方式比较浪费内存,相对于磁盘,内存是昂贵且稀有的,为了更有效的利用内存,采用</li></ul><blockquote><p>局部性原理,将程序最常用的部分驻留在内存中,而不太常用的放在磁盘中,这种方式也叫做动态载入(上面的虚拟页分页有提及),常见的动态装入有两种分别是:</p><p>1.覆盖装入 2.页映射<br>其中覆盖装入在虚拟内存没发明前使用比较广泛,现在几乎被淘汰(DSP嵌入式可能会用到),实现方式为编写一个辅助代码用来管理这些模块何时驻留在内存</p><p>合适被替换掉(覆盖管理器),通过模块之间的依赖关系,画出树状结构,将彼此不会互相调用(禁止跨树间调用)的的进行分类,共享块内存区域,进而增加内存利用率</p></blockquote><ul><li><strong>页映射</strong>是虚拟存储机制的一部分,它没有把可执行文件的&quot;段&quot;(section)当作内存分配最小单位,而是把&quot;页&quot;(page)作为划分单位(大小和硬件有关),如果我们假设每页大小为4K,内存大小为16K,那可以把这个内存分为4页(物理页):F0~F3,如果一个大小为32K的程序(数据+指令),那可以分成8页(虚拟页):P0~P7,如果程序的入口地址在P0,此时系统发现程序不在内存中,就会把内存F0分配给P0,并将P0的内容装入给F0,程序开始运行,运行一段时间后,程序要用到P5,于是将P5装入到F1,依次类推,如果运行只需要4页,那程序就能一直运行下去,但如果要用到其他页,但现在物理内存已经被映射满了,就需要系统的装载管理器做出抉择,是要将已经装载的4个页中的哪一个卸载掉,一般常用</li></ul><blockquote><p>有两种方式:1.FIFO:先入先出,最先分配的最先卸载<br>2.LUR:被使用最小次数的页先卸载.</p></blockquote><ul><li>想来你也发现了,因为页映射的机制,卸载装载比较频繁,如果程序使用物理地址进行操作,每次页装入都要重定位,但如果程序运行在独立的虚拟地址空间就不需要考虑这个问题,因此MMU提供的地址转换功能就能完美适配(地址转换+页映射都交给它),事实上,一个进程最关键的特征就是它拥有一个独立的虚拟地址空间,一个进程的创建有如下几个步骤:</li></ul><blockquote><p>首先一个虚拟空间的各个页都可以映射相应的物理空间(初始化就已经创建好了,只是映射关系需要通过MMU确定),因此这里的创建独立虚拟地址空间不是实际上的创建空间,而是创建映射函数所需要的数据结构,即分配一个页目录(至于虚拟空间和物理页的映射关系交给MMU),这些映射关系等后面程序运行时发现页错误(入口地址)再进行设置;</p><p>其次读取可执行文件头信息,建立虚拟空间和可执行文件的映射关系,相当于当系统发现缺页错误(可执行文件的指令和数据没有真正装入到内存)的时候,它会从物理内存分配一个物理页给程序,然后缺页的部分(存储在磁盘)会读取到这个物理内存中,在通过MMU设置虚拟页和物理页的映射关系,程序才能正常运行,因此系统捕获到缺页错误的时候,就要知道程序所需要的页在可执行文件的哪个位置,这个映射关系就是虚拟空间(虚拟段)和可执行文件之间(偏移量)的映射关系,这种映射关系也只是保存在系统内部的一个数据结构,将映射到虚拟内存区域(VMA)的段叫做虚拟段(VS);由于可执行文件装载的时候实际上是被映射的虚拟空间,所以可执行文件也被叫做映像文件.</p><p>最后将CPU指令寄存器设置为可执行文件入口,这一步最简单,相当于将CPU指令寄存器的控制权交给进程,它涉及到内核堆栈的切换,CPU运行权限的切换,但从进程角度来看,就是简单的跳转指令,跳转段程序入口(entry).随着程序执行,页错误会不断产生,页的装入和收回也频繁发生,随着段数量的增多,就可能产生空间上的浪费,因为系统映射是按照页大小分配的,如果每个段的长度都是页的整数倍,那还好,如果不是,那多余的部分就会多占一个页,一个可执行文件往往有十几个段,有没有方式减少这种浪费?</p></blockquote><ul><li><p>如果我们按每一页高效的装载数据为目的,机会发现,它并不关心各个段所包含的实际内容,只关心装载相关的问题,比如段的权限(可读可写可执行),ELF的段权限往往只有为数不多的几种组合,因此有个简单的方案,将相同权限的段合并一起当作一个段进行映射,比如&quot;.text&quot;(可执行代码)和&quot;.init&quot;(初始化代码),这里引入了一个链接过程中的概念&quot;Segment&quot;(装载段),一个&quot;Segment&quot;可以包含一个或多个属性类似的&quot;Section&quot;(可执行文件程序段&#x2F;链接段).链接的时候将一个Segment作为整体一起映射,减少页面碎片,节省内存空间,因此Segment从装载的角度重新划分ELF的各个段.(一般来说Segment的数量会小于Section数量)</p></li><li><p><strong>动态链接的优点与实现</strong></p><ul><li>P196 Linux<br>内核装载过程:静态链接(所有依赖关系文件打包成一个文件存放于磁盘)使得开发和测试能相对独立进行,但限制程序规模,并且如果一个程序要用到静态库就要多链接1MB的容量,程序一多,静态库占用的空间也叠加,导致空间越来越大.而动态链接把链接过程推迟到运行时(动态选择依赖文件(不是打包是单独一堆文件)先在磁盘完成链接再载入内存)进行，解决了静态链接存在的内存和磁盘空间浪费(共用动态库)、程序开发发布和更新麻烦的问题(静态库的lib.o如果更新,那么所有用到这个静态库的模块都要更新一版发布,如果是动态库则只需要替换.so&#x2F;.ko并且更加灵活,可以动态添加第三方开发的模块,实现程序的拓展<br>MOD)，同时这些动态链接库也相当于程序与系统增加了一个中间层,消除程序对平台的依赖性(A平台和B平台的print函数实现机制不一样,可以将动态链接库分为A,B两个版本差异发布)但动态链接性能低于静态链接，常用延迟绑定(性能换空间)等优化手段。</li></ul></li><li><p>装载时链接举例:当我们运行A.o的时候,系统会首先从磁盘将A.o加载到内存,当系统发现A.o还依赖于Lib.o,于是系统接着加载Lib.o,如果Lib.o还依赖其他文件,则依次加载,</p></li></ul><blockquote><p>等所有依赖的目标文件都加载完毕后,系统开始链接工作(符号解析,重定位),完成这些步骤后,系统加将控制权交给A.o的程序入口处,程序开始执行,如果这是要再运行另一个程序B.o</p><p>发现B.o也依赖Lib.o,这时候就不需要再将Lib.o重新拷贝&#x2F;加载到内存,只需要将B.o和已经在内存中的Lib.o链接起来即可(避免出现多个依赖文件副本的问题,同一时刻,运行在内存中的</p><p>依赖文件只有一份Lib.o),这种方式的好处在于可以将规模很大的工程分割为多个子系统和模块,每个模块由独立小组开发,如果程序需要升级,我们只需要升级程序库或者共享库,将旧的目标文件替换掉即可,下一次运行新版本的目标文件就会被自动装载到内存链接起来,就不需要将所有程序重新链接,比如linux中的glibc他的动态链接形式版本叫libc.o</p></blockquote><ul><li><p>在静态链接的时候,程序最终只有一个可执行文件,他是一个不可分割的整体,但动态链接下,一个程序被分成若干个文件,有程序主要部分(.o)和程序依赖的共享对象(.so)组成,很多时候我们称他们为模块.程序模块在编译时目标地址不确定，因为动态链接的规则是在进行符号解析的时候,这个符号如果是定义在动态库的函数,就会将这个符号的引用标记为一个动态链接的符号,不对它进行地址重定位,需要在装载(运行)时将模块重定位，叫做装载时重定位，Windows<br>下叫做基址重置,共享文件的最终装载地址在编译的时候是不确定的(因此每个文件的装载地址都是0x00000),需要动态装载器根据当前地址空间的空闲情况,动态分配一块足够大的虚拟地址空间给响应的共享对象。</p></li><li><p>对于动态链接的进程地址空间分布:因为需要运行时链接,所以动态链接器与普通的共享对象一样会被映射到进程的地址空间,系统在运行程序前,会将控制前交给动态链接器,等它完成所有的动态链接工作后再把控制权交给要运行的程序,很明显存在一个问题如果模块A分配到0x1000~0x1FFF的地址,模块B分配0x2000~0x2FFF,如果制作程序时,某位开发者发现不需要用到模块A,于是将空闲出来的0x1000~0x1FFF的地址分配给另一个模块C,这样就导致模块A和模块C地址冲突无法同时工作,这种手动告诉动态链接器分配地址的方式简直是灾难.于是有一种静态共享库的方法,他将程序的各个模块统一交给操作系统管理,操作系统在特定的地址分配足够大的地址块,但这就导致模块升级麻烦,因为为了避免地址冲突,就必须保证升级后的共享库全局函数和变量的地址不能改变,因为应用程序已经绑定这些固定地址,一旦更改(比如增加全局变量),就必须重新链接,否则系统会崩溃.那么,有一种方式可以让共享对象在编译的时候不假设自己在进程虚拟地址空间(默认可执行文件的起始地址是0x08040000)?等到运行时在确定进程绝对地址(装载重定位的由来).但装载重定位是针对单个进程的静态修正,装载器会根据进程的加载及地址一次性修正所有的绝对地址引用,但不同进程的基地址通常不同,且虚拟地址映射到不同的物理地址(进程隔离),因此无法实现物理内存的共享.(因此相当于共享部分在每个进程中建立了副本,失去了节省空间的优势)为解决动态模块中有绝对地址引用时指令部分在多个进程之间共享(访问同一块物理内存)的问题，采用地址无关代码方案，把指令中需要修改的部分分离出来与数据部分放在一起,这样剩余的指令部分可以保持不变,而数据部分可以在每个进程中拥有一个副本。我们将跨模块访问分为模块内&#x2F;模块外,并又分了是数据引用还是指令引用,于是得到下面4中情况:对我们来说模块内部的跳转和数据访问都可以通过相对地址调用解决,不需要重定位.因此只要相对位置不变,.不管装载的地址在哪里,都可以通过偏移找到,但对于模块间的数据&#x2F;指令访问就比较麻烦,因为访问目标地址只有在装载的时候才确定,这就要使得这部分成为代码地址无关,将他们放到数据段里面,并建立全局偏移表(GOT),建立一个用来指向这些变量&#x2F;函数的指针数组.当代码要用到该全局变量&#x2F;函数的时候,可以通过GOT中相应的项间接引用(因为引入地址无关代码,因此数据段属于进程私有数据,模块A和模块B都访问全局便利G,如果A修改G,B访问的G还是原来的,因为A,B的数据段是私有的,相当于对G都做了备份,这种访问方式叫做线程私有存储),如果想要实现多个进程共享同一个全局变量用来实现进程间的通信,可以使用&quot;共享数据段&quot;的方式<br>height&#x3D;”8.180555555555555in”}</p></li><li><p>延迟绑定(PLT),因为运行时才进行重定位以及动态GOT定位的存在,动态链接的性能必然低于静态链接,因此引入了优化动态链接性能的方法:因为很多函数在程序执行的时候</p></li></ul><blockquote><p>不会被用到(比如错误处理&#x2F;少用的功能函数),所以一开始九八所有函数都链接号实际上是对性能的一种浪费,因此PLT的基本思想是当函数第一次被用到的时候才进行绑定(局部性原理)</p><p>如果没有用到就不绑定,这样就大大加快程序启动速度.当程序调用到某个外部模块的函数时,PLT会在GOT定位过程中加上间接跳转,即调用函数不通过GOT跳转,而是通过PLT项的结构进行跳转,每个外部函数在PLT都有一个相似的项.这样做的目的是,链接器在初始化的时候就已经将外部函数填入到PLT中,代价更低,这里要注意的是,锁没有被GOT记录,因为它不是每个线程都有自己的备份,而是需要被全局初始化,线程只能访问同一个锁,因此即使锁被多个西安测绘给你加载,它还是会映射到全局的唯一地址,避免每个线程持有独立的锁副本</p></blockquote><ul><li>动态链接的步骤和实现包括动态连接器自举(.interp段,用来决定谁才是动态链接器,并决定位置,且不依赖任何共享对象并且其本身的全局和静态变量重定位的工作由它本身完成,其本身是静态链接的(PIC))、装载共享对象、重定位和初始化堆栈信息。另外还有一种更灵活的链接方式---显式运行时链接,就是让程序自己在运行时控制加载指定模块,并且可以在不需要该模块的时候将其卸载</li></ul><blockquote><p> </p></blockquote><ul><li><p><strong>共享库的管理与维护</strong></p><ul><li>介绍了 ELF<br>共享库的版本命名方式、共享库的符号版本机制、共享库路径（如<br>&#x2F;lib,&#x2F;usr&#x2F;lib,&#x2F;usr&#x2F;local&#x2F;lib<br>等）、查找过程(ld.so.config)、环境变量(LD_LIBRARY_PATH<br>临时改变某个应用程序的共享库查找路径.不影响系统中的其他程序(优先级最高)<br>LD_PRELOAD<br>指定预先装载哪些共享库或者目标文件(等效于&#x2F;etc&#x2F;ld.so.preload)<br>LD_DEBUG 打开动态链接器的调试功能 )、共享库的创建(GCC<br>-shared)与安装(放入对应lib文件夹目录中即可)等内容，以确保大量共享库在更新或升级中兼容版本。</li></ul></li></ul><p><strong>第六章 运行库</strong></p><ul><li><p><strong>内存:</strong></p><ul><li><p><strong>系统使用内存地址的空间被称为内核空间</strong></p></li><li><p><strong>栈---特殊的容器,可以将数据压栈,也可以将压栈的数据弹出(出栈),遵循先进后出规则(FILO),栈总是向下增长(栈底),栈顶由esp寄存器定位,压栈使栈顶地址减少,出栈反之,栈保存了一个</strong></p></li></ul></li></ul><blockquote><p><strong>函数调用所需要的维护信息,(堆栈帧 Stack Frame<br>SF或者活动记录AR),主要包括:函数返回地址和参数,非静态临时局部变量,保存的上下文,ebp指向当前函数活动记录的顶部</strong></p></blockquote><ul><li><strong>堆与内存管理:全局变量无法动态产生,是编译的时候就定义,因此它不存放在栈里面,它存放在堆里面,堆是一块巨大的内存空间,程序可以请求一块连续的内存并自由使用,申请的内存在</strong></li></ul><blockquote><p><strong>程序主动放弃前都保持有效,一般是通过malloc去申请堆,通过free进行释放,那么堆空间是怎么被申请和管理的呢?如果将进程的堆内存管理交给操作系统,如果程序频繁申请&#x2F;释放,都需要进行系统调用,这样性能开销会很大,因此让程序自己管理分配的堆空间比较合理,而堆空间的分配和管理往往是由程序的运行库操作的.<br>运行库会向操作系统&quot;批发&quot;到一块较大的堆空间,然后&quot;零售&quot;给程序用,如果这些堆空间&quot;售罄&quot;,运行库再根据实际需求向操作系统&quot;进货&quot;,运行库不仅仅会做这些,还管理它批发的堆空间,不会吧同一个房间同时出售给两个人,因此运行库通过堆的分配算法管理堆空间,堆空间的申请其实是调用mmap()系统接口(malloc也是用mmap),他的作用是向操作系统申请一段连续的虚拟地址空间(这个空间可以映射到某个文件),当它不将地址映射到某个文件时,我们称这个空间是匿名的,mmap的前两个参数用来指定申请空间的起始地址(一般填0由系统自动挑选合适起始地址)和长度(大小一般要为系统页大小的整数倍),flag&#x2F;prot参数用来设置申请的空间权限(可读可写可执行)以及映射类型(文件映射&#x2F;匿名映射)</strong></p><p><strong>堆的分配算法---&gt;按需分配&#x2F;释放堆内存:</strong></p><p><strong>1.空闲链表:将堆中各个空闲的内存块按照链表的方式连接起来,当用户请求一块空间时,可以遍历整个链表,直到找到合适的块,当用户释放申请内存空间的时候再将它合并到空闲链表中</strong></p><p><strong>2.位图:将整个堆分为大量的块,每个块大小相同,当用户申请内存的时候总是分配整数个块的空间给用户,第一个块称已分配区域的头部(Head),其他称为已分配区主体(Body),然后用整数数组记录块的使用情况,每个块只有头&#x2F;主体&#x2F;空闲三种状态,因此只要2bit就能表示一个块,故称为位图.(速度快稳定性好但容易产生内存碎片)</strong></p><p><strong>3.对象池:规定每一次分配的空间大小都是一样,并按照这个大小为单位将堆空间划分为大量小块,每次请求只需要找到其中的小块就行</strong></p></blockquote><blockquote><p> </p></blockquote><ul><li><p><strong>运行库的功能与实现</strong></p><ul><li>运行库包含程序入口点的实现、CRT（C Run - Time Library，C<br>运行时库）的初始化过程（如 IO<br>初始化）、库函数的实现、运行库的构造、运行库与并发、C++<br>运行库实现全局构造的方法等。</li></ul></li></ul><blockquote><p>程序使用main开始的吗?其实你会发现并不是,如果main一开始就执行,那main函数传进来的两个参数时怎么来的?其实在执行main函数的时候,已经有一些代码负责准备好main函数要执行所需的环境了,比如堆栈的初始化,一些系统IO也被初始化,这样你才可以放心的使用printf和malloc.在退出main函数后,程序就执行完了吗?u而不是,还会调用exit()相关的函数,完成收尾工作,比如将注册的函数注销.(.init和fini段),.运行init段的代码的函数我们称为入口函数&#x2F;入口点(Entry<br>Point).</p></blockquote><ul><li>C<br>语言运行库包含启动与退出、标准函数、I&#x2F;O、堆、语言实现、调试等功能，还涉及线程局部存储实现等与多线程相关的内容。C++<br>运行库实现了 new&#x2F;delete、C++ 全局构造与析构、入口函数修改、stream 与<br>string 等功能。</li></ul><blockquote><p>在linux操作系统上,I&#x2F;O(输入输出设备)可以看作时文件操作,通过某个函数打开文件都会获得文件描述符&#x2F;句柄,用户操控文件都可以通过该句柄进行(用户无法通过地址访问,只能通过系统提供的接口操作,保证了安全性).</p></blockquote><p> </p><p><strong>第七章 系统调用与 API</strong></p><ul><li><p><strong>系统调用的原理与实现</strong></p><ul><li><p>很多资源由操作系统管理，操作系统提供系统调用接口给应用程序。系统调用运行在内核态，操作系统通过中断从用户态切换到内核态，中断有中断号和中断处理程序，内核中有中断向量表，中断包括硬件中断和软件中断，系统调用就是一种软件中断(终端号+接口号)，如<br>Linux 下的 0x80 号中断。</p></li><li><p>系统调用的实现过程包括触发中断、切换堆栈、中断处理程序。</p></li></ul></li><li><p><strong>Windows API 的特点(了解即可)</strong></p><ul><li>Windows 上在系统调用之上封装了 API，API 提供接口给应用程序，API<br>基于系统调用，系统调用在 Windows 上叫做系统服务。API<br>存在的原因是系统调用非常依赖硬件接口，Windows<br>为了程序兼容性加了这个中间层。</li></ul></li></ul><p> </p><p> </p><p> </p><p> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/03/Common-Terms-in-Embedded-Systems/"/>
    <url>/2025/09/03/Common-Terms-in-Embedded-Systems/</url>
    
    <content type="html"><![CDATA[<h1 id="Common-Terms-in-Embedded-Systems"><a href="#Common-Terms-in-Embedded-Systems" class="headerlink" title="Common-Terms-in-Embedded-Systems"></a>Common-Terms-in-Embedded-Systems</h1><p>嵌入式常见名词</p><p><strong>A</strong></p><p><strong>ASIC</strong>（专用集成电路） Application-Specific Integrated Circuit. A<br>piece of custom-designed hardware in a chip.<br>专用集成电路。一个在一个芯片上定制设计的硬件。</p><p><strong>address bus</strong> （地址总线） A set of electrical lines connected to the<br>processor and all of the peripherals withwhich itcommunicates. The<br>address bus is used by the processor to select aspecific memory location<br>or register within a particular peripheral. If the address bus contains<br>n electrical lines, the processor can uniquely address up to 2^n such<br>locations.<br>一个连接处理器与所有外设的，用来通讯的电子线路集。地址总线被处理器用来选择在特定外设中的存储器地址或寄存器。如果地址总线有n条电子线路，处理器能唯一寻址高达2^n的地址空间。</p><p><strong>application software</strong>（应用软件） Describes software modules specific<br>to a particular embedded project. Theapplication software is unlikely to<br>be reusable across embedded platforms, simplybecause each embedded<br>system has a different application.<br>用来描述一个特定的嵌入式项目中的某一软件模块。应用软件不象可重用的交叉嵌入式平台，只是因为每一个嵌入式系统有不同的应用软件。</p><p><strong>assembler</strong>（汇编编译器） A software development tool that translates<br>human-readable assembly languageprograms into machine-language<br>instructions that the processor can understandand execute.<br>一个能把人可读的汇编语言程序转换到处理器可理解和运行的机器指令的软件开发工具。</p><p><strong>assembly language</strong>（汇编语言） A human-readable form of a<br>processor&quot;s instruction set. Most processor-specific functions must be<br>written in assembly language.<br>一种人可读的处理器指令集的形式。大多数处理器相关的功能必须用汇编语言编写。</p><p><strong>B</strong></p><p><strong>BSP</strong>（板卡支持包） See board support package. 见board support<br>package。</p><p><strong>binary semaphore</strong>(二元信号) A type of semaphore with just two states.<br>Also called a mutex. 一种只有两种状态的信号。也叫互斥信号。</p><p><strong>board support package</strong>（板卡支持包） Part of a software package that<br>is processor or platform-dependent. Typically,sample source code for the<br>board support package is provided by the package developer. The sample<br>code must be modified as necessary, compiled, and linked with the<br>remainder of the software package.<br>软件包的具有平台依赖性的那一部分。典型地，板卡支持包的样例源程序由包开发者提供。样例源程序必须能在需要时被修改、编译并与软件包的剩下的部分连接起来。</p><p><strong>bond-out processor</strong> （外合处理器） A special version of a processor<br>that has some of the internal signals brought out to external pins. A<br>bond-out processor is most often found within an emulator and is never<br>intended to be used in a production system.<br>一种特殊版本的处理器，它有一些，内部的信号能传达到外置的针脚上。一个外合处理器绝大多数情况下只用在模拟器上，从来不会被特意用在产品系统上。</p><p><strong>Breakpoint</strong> （断点） A location in a program at which execution is to<br>be stopped and control of the processor switched to the debugger.<br>Mechanisms for creating and removing breakpoints are provided by most<br>debugging tools.<br>一个在程序中的地址，在那里程序的执行被停止，并且处理器的控制转换到了除错程序。大多数除错工具提供增加与删除一个断点的机制。</p><p><strong>C</strong></p><p><strong>CISC</strong>（复杂指令集计算机） Complex Instruction Set Computer. Describes<br>the architecture of a processor family. CISC processors generally<br>feature variable-length instructions, multiple addressing formats, and<br>contain only a small number of general-purpose registers. Intel&quot;s 80x86<br>family is the quintessential example of CISC. Contrast with RISC.<br>复杂指令集计算机。对一种处理器架构的描述。CISC处理器一般产生变长的指令，多种地址格式，并且仅仅有少量的通用寄存器。Intel的80x86家族是是典型的CISC处理器。相对于RISC而言。</p><p><strong>CPU</strong>（中央处理器） Central Processing Unit. The part of a processor<br>that executes instructions. 中央处理器。处理器中执行指令的那一部分。</p><p><strong>Compiler</strong>（编译器） A software development tool that translates<br>high-level language programs into the machine-language instructions that<br>a particular processor can understand and execute.<br>把高级编程语言程序转换到只有特定的处理器能了解和执行的机器指令的一种软件开发包。</p><p><strong>context</strong> （上下文） The current state of the processor&quot;s registers<br>and flags. 处理器当前的状态和标志。</p><p><strong>context switch</strong>（上下文切换） The process of switching from one task<br>to another in a multitasking operating system. A context switch involves<br>saving the context of the running task and restoring the<br>previously-saved context of the other. The piece of code that does this<br>is necessarily processor-specific.<br>在多任务操作系统中我一个任务切换到另一个的过程。上下文切换包括保存正在运行的任务的上下文和恢复早先保存的另一个任务的上下文。做这个工作的一段代码必须具有处理器特权。</p><p><strong>counting semaphore</strong>（计数信号） A type of semaphore that is used to<br>track multiple resources of the same type. An attempt to take a counting<br>semaphore is blocked only if all of the available resources are in use.<br>Contrast with binary semaphore.<br>一种用来跟踪多个相同类型资源的信号灯。仅仅在所有可用的资源都被用完了时才阻塞。相对二元信号而言。</p><p><strong>critical section</strong>（临界段） A block of code that must be executed in<br>sequence and without interruption to guarantee correct operation of the<br>software. See also race condition.<br>一段必须按次序执行的代码，并且不能被中断，否则不能保证软件正确地操作。参照：竞争状况。</p><p><strong>cross-compiler</strong>（交叉编译器） A compiler that runs on a different<br>platform than the one for which it produces object code. A<br>cross-compiler runs on a host computer and produces object code for the<br>target.<br>一个运行在不同的平台上的编译器，其中之一能产生目标代码。交叉编译器在主机上运行并且产生目标机的目标代码。</p><p><strong>D</strong></p><p><strong>DMA</strong>（直接内存访问） Direct Memory Access. A technique for<br>transferring data directly between two peripherals (usually memory and<br>an I&#x2F;O device) with only minimal intervention by the processor. DMA<br>transfers are managed by a third peripheral called a DMA controller.<br>直接内存访问。一种直接在两个外设（通常是内存和I&#x2F;O设备）之间进行数据传输的技术，它只要处理器最少的介入。DMA传输由叫DMA控制器的第三方外设进行管理。</p><p><strong>DRAM</strong>（动态随机访问存储器） Dynamic Random-Access Memory. A type of<br>RAM that maintains its contents only as long as the data stored in the<br>device is refreshed at regular intervals. The refresh cycles are usually<br>performed by a peripheral called a DRAM controller.<br>动态随机访问存储器。一种RAM，存储在其设备中的数据被定期刷新时才能保存它的内容。刷新周期一般由一个叫DRAM控制器的外设完成。</p><p><strong>Data bus</strong>（数据总线） A set of electrical lines connected to the<br>processor and all of the peripherals with which it communicates. When<br>the processor wants to read (write) the contents of a memory location or<br>register within a particular peripheral, it sets the address bus pins<br>appropriately and receives (transmits) the contents on the data bus.<br>连接处理器与所有外设进行通讯的电子线路集。当一个处理器想去写（读）某一特定外设中的存储器地址或寄存器中的内容时，处理器设置地址总线并在数据总线上接收（传输）内容。</p><p><strong>Deadline</strong>（死线） The time at which a particular set of computations<br>must be completed. See also real-time system.<br>一个特定计算必须被完成的时间。请看实时系统。</p><p><strong>Deadlock</strong>（死锁） An unwanted software situation in which an entire<br>set of tasks is blocked, waiting for an event that only a task within<br>the same set can cause. If a deadlock occurs, the only solution is to<br>reset the hardware. However, it is usually possible to prevent deadlocks<br>altogether by following certain software design practices.<br>一种不希望出现的软件状态，在这个状态下，所有的任务因为等待一个只有在这些被阻塞任务之一才能产生的事件而被阻塞。如果死锁发生，唯一解决的方法是重启动硬件。但是，通过可靠的软件设计实践活动通常可以防止死锁的发生。</p><p><strong>debug monitor</strong>（除错监视程序） A piece of embedded software that has<br>been designed specifically for use as a debugging tool. It usually<br>resides in ROM and communicates with a debugger via a serial port or<br>network connection. The debug monitor provides a set of primitive<br>commands to view and modify memory locations and registers, create and<br>remove breakpoints, and execute your program. The debugger combines<br>these primitives to fulfill higher-level requests like program download<br>and single-step.<br>嵌入式软件被特殊设计来作为除错工具的一部分。它一般被放在ROM中，通过串口或网络与除错器进行通讯。除错监视程序提供一个简单的命令集来显示和内存地址和寄存器、建立和移除断点，并且运行你的程序。除错监视器组合这些简单的命令去实现象程序下载各单步调试等高端的请求。</p><p><strong>Debugger</strong>（除错器） A software development tool used to test and<br>debug embedded software. The debugger runs on a host computer and<br>connects to the target through a serial port or network connection.<br>Using a debugger you can download software to the target for immediate<br>execution. You can also set breakpoints and examine the contents of<br>specific memory locations and registers.<br>一个软件开发工具，被用来对嵌入式软件进行测试和除错。除错器在宿主机上运行并且通过串口或网络连接到目标机上。你能使用除错器下载软件到目标机并直接运行。你也可以设置断点并检查特定内存地址或寄存器的内容。</p><p><strong>device driver</strong>（设备驱动程序） A software module that hides the<br>details of a particular peripheral and provides a high-level programming<br>interface to it.<br>一个软件模块，它隐藏特定外设的细节并提供高级的外设编程接口。</p><p><strong>device programmer</strong>（设备编程器） A tool for programming non-volatile<br>memories and other electrically-programmable devices. Typically, the<br>programmable device is inserted into a socket on the device programmer<br>and the contents of a memory buffer are then transferred into it.<br>一种用来对不挥发内存和其他电可编程设备进行编程的工具。典型地，可编程设备被插到设备编程器的接口上，接着内存缓存器中的内容被传送到它里面。</p><p><strong>digital signal processor</strong>（数字信号处理器） A device that is similar<br>to a microprocessor, except that the internal CPU has been optimized for<br>use in applications involving discrete-time signal processing. In<br>addition to standard microprocessor instructions, DSPs usually support a<br>set of complex instructions to perform common signal-processing<br>computations quickly.Common DSP families are TI&quot;s 320Cxx and<br>Motorola&quot;s 5600x series.<br>一种类似于微处理器的的设备，不同的是它内部的CPU被优化，用于特定的应用，如离散信号处理。除了标准的微处理器指令外，DSP常常支持复杂指令集去非常快地完成通用的信号处理计算。通用DSP家庭是TI的320Cxx和Motorola的5600x系列。</p><p><strong>E</strong></p><p><strong>EEPROM</strong>（电可擦的，可编程的只读存储器） Electrically Erasable,<br>Programmable Read-Only Memory. (Pronounced&quot;Double-E&quot;-PROM.) A type of<br>ROM that can be erased electronically.<br>电可擦的，可编程的只读存储器。一种ROM能被电擦除。</p><p><strong>EPROM</strong>（可擦的，可编程的只读存储器） Erasable, Programmable Read-Only<br>Memory. A type of ROM that can be erased by exposing it to ultraviolet<br>light. Once erased, an EPROM can be reprogrammed with the help of a<br>device programmer.<br>一种可用紫外线擦除的存储器。一次擦除后，EPROM可以在设备编程器的帮助下被重编程。</p><p><strong>embedded system</strong>（嵌入式系统） A combination of computer hardware and<br>software, and perhaps additional mechanical or other parts, designed to<br>perform a dedicated function. In some cases, embedded systems are part<br>of a larger system or product, as is the case of an anti-lock braking<br>system in a car. Contrast with general-purpose computer.<br>计算机硬件和软件的结合体，或许还加上机械等其他部分，被设计来完成专门的功能。在一些情况下，嵌入式系统是一个大的系统或产品的一部分，就象汽车上的防抱死装置。与通用计算机相对。</p><p><strong>Emulator</strong>(仿真器) Short for In-Circuit Emulator (ICE). A debugging<br>tool that takes the placeof-emulates-the processor on your target board.<br>Emulators frequently incorporate a special &quot;bond-out&quot; version of the<br>target processor that allows you to observe and record its internal<br>state as your program is executing .<br>在线仿真器的简写。一个在你的目标板上放置仿真的处理器的调试工具。仿真器经常和一目标处理器的一种”外合”版本合在一起，这个版本的的处理器充许你运行程序时观察和记录它的内部状态。</p><p><strong>Executable</strong>（可执行的） A file containing object code that is ready<br>for execution on the target. All that remains is to place the object<br>code into a ROM or download it via a debugging tool.<br>一个包含准备在目标机上运行的目标代码的文件。放置目标代码到ROM中或通过调试工具下载。</p><p><strong>F</strong></p><p><strong>Firmware</strong>（固件） Embedded software that is stored as object code<br>within a ROM. This name is most common among the users of digital signal<br>processors.<br>是作为目标代码存贮在ROM中的嵌入式软件。这个名字在数字信号处理器的用户中相当流行。</p><p><strong>flash memory</strong> （闪存） A RAM-ROM hybrid that can be erased and<br>rewritten under software control. Such devices are divided into blocks,<br>called sectors, that are individually-erasable. Flash memory is common<br>in systems that require nonvolatile data storage at very low cost. In<br>some cases, a large fash memory may even be used instead of a<br>disk-drive.<br>一种RAM-ROM的混血儿，它能在软件的控制下被擦除和重写。一些设备被分成叫段组的块，能个别地可擦。闪存用在需要很便宜的非易失数据存贮器的地方，一个大容量的闪存甚至被用作磁盘驱动器。</p><p><strong>G</strong></p><p><strong>general-purpose computer</strong>（通用计算机） A combination of computer<br>hardware and software that serves as a general-purpose computing<br>platform. For example, a personal computer. Contrast with embedded<br>system.<br>当作通用计算平台的计算机硬件与软件的组合。例如，PC。相对于嵌入式计算机。</p><p><strong>H</strong></p><p><strong>HLL</strong> See high-level language. 查阅高级语言。</p><p><strong>Heap</strong>（堆） An area of memory that is used for dynamic memory<br>allocation. Calls to malloc and free and the C++ operators new and<br>delete result in run-time manipulation of the heap.<br>一块被用作动态内存分配的内存区域。调用malloc和free、C++的操作符new、delete在运行时进行堆的操作。</p><p><strong>high-level language</strong>（高级语言） A language, such as C or C++, that<br>is processor-independent. When programming in a high-level language, it<br>is possible to concentrate on algorithms and applications without<br>worrying about the details of a particular processor.<br>一种语言，象C或C++，是处理器独立的。当在高级语言上编程时，不需要考虑特定处理器的细节，只用关心算法和应用。</p><p><strong>Host</strong>（主机） A general-purpose computer that communicates with the<br>target via a serial port or network connection. This term is usually<br>used to distinguish the computer on which the debugger is running from<br>the embedded system that is being developed.<br>一台通用计算机，它通过串口或网络连接与目标机通讯。这处名词一般用来区别调试程序运行的计算机和被开发的嵌入式系统。</p><p><strong>I</strong></p><p><strong>ICE</strong> In-Circuit Emulator. See emulator. 在线仿真器。查阅仿真器。</p><p><strong>I&#x2F;O</strong>（输入&#x2F;输出） Input&#x2F;Output. The interface between a processor and<br>the world around it. The simplest examples are switches (inputs) and<br>LEDs (outputs).<br>输入&#x2F;输出。处理器与外界的交互界面。最简单的例子是开关（输入）和发光二级管（输出）。</p><p><strong>I&#x2F;O device</strong>（IO设备） A piece of hardware that interfaces between the<br>processor and the outside world. Common examples are switches and LEDs,<br>serial ports, and network controllers.<br>一种介于处理器和外界之间的硬件设备。一般的实例是开关、LED、串口和网络控制器。</p><p><strong>I&#x2F;O map</strong>（I&#x2F;O映射） A table or diagram containing the name and<br>address range of each peripheral addressable by the processor within the<br>I&#x2F;O space. I&#x2F;O maps are a helpful aid in getting to know the target.<br>一张包含每个外设的名字和地址的表格或图表，可由处理器在I&#x2F;O空间中设定地址。I&#x2F;O映射对得知目标机情况非常有利。</p><p><strong>I&#x2F;O space</strong>（I&#x2F;O空间） A special memory region provided by some<br>processors and generally reserved for the attachment of I&#x2F;O devices.<br>Memory locations and registers within an I&#x2F;O space can be accessed only<br>via special instructions. For example, processors in the 80x86 family<br>have special I&#x2F;O space instructions called in and out. Contrast with<br>memory space.<br>一个由处理器提供的特殊内存区域，一般为为I&#x2F;O设备的附件保留。在I&#x2F;O空间的内存位置和寄存器只能通过特殊的指定进行访问。例如：80X86家族的处理器有叫做in<br>&#x2F; out的特殊的I&#x2F;O空间指令。相对内存空间而言。</p><p><strong>ISR</strong>（中断服务程序） See interrupt service routine. instruction<br>pointer（指令指针） A register in the processor that contains the<br>address of the next instruction to be executed. Also known as a program<br>counter. 包含下一条要执行指令地址的处理器中的寄存器。也叫程序计数器。</p><p><strong>Interrupt</strong>（中断） An asynchronous electrical signal from a<br>peripheral to the processor. When the peripheral asserts this signal, we<br>say that an interrupt occurs. When an interrupt occurs, the current<br>state of the processor is saved and an interrupt service routine is<br>executed. When the interrupt service routine exits, control of the<br>processor is returned to whatever part of the software was previously<br>running.<br>一个从外设到处理器的异步电信号。当外设发出这个信号，我们说一个中断发生。当一个中断发生，当前的处理器状态被保存并且中断服务程序开始运行。当中断服务程序退出，对处理器的控制权转到先前运行的那个软件上。</p><p><strong>interrupt latency</strong>（中断延迟） The amount of time between the<br>assertion of an interrupt and the start of the associated interrupt<br>service routine. 在中断发生和相关的中断服务程序运行之间的时间长短。</p><p><strong>interrupt service routine</strong>（中断服务程序） A piece of software<br>executed in response to a particular interrupt.<br>响应特定中断而运行的一小段软件。</p><p><strong>interrupt type</strong>（中断类型） A unique number associated with each<br>interrupt. 和每一个中断相关联的唯一数字。</p><p><strong>interrupt vector</strong> （中断向量） The address of an interrupt service<br>routine. 中断服务程序所在的地址。</p><p><strong>interrupt vector table</strong>（中断向量表） A table containing interrupt<br>vectors and indexed by interrupt type. This table contains the<br>processor&quot;s mapping between interrupts and interrupt service routines<br>and must be initialized by the programmer.<br>一个表格，包含由中断类型决定的中断向量和索引。这个表格包含中断与中断服务程序之间的处理器的映射，必须由程序员进行初始化。</p><p><strong>intertask communication</strong>（进程间通讯） A mechanism used by tasks and<br>interrupt service routines to share information and synchronize their<br>access to shared resources. The most common building blocks of intertask<br>communication are semaphores and mutexes.<br>一种被用来在任务和中断服务程序之间共享信息和同步它们对共享资源访问的机制。大部分进程间通讯的建立的基石是信号灯和互斥。</p><p><strong>K</strong></p><p><strong>Kernel</strong>（内核） An essential part of any multitasking operating<br>system, the kernel contains just the scheduler and context-switch<br>routine.<br>任何多任务操作系统的本质部分，内核仅仅包含调度程序和上下文切换进程。</p><p><strong>L</strong></p><p><strong>Linker</strong>（连接程序） A software development tool that accepts one or<br>more object files as input and outputs a relocatable program. The linker<br>is thus run after all of the source files have been compiled or<br>assembled.<br>一种能把一个或更多目标文件组合成可输入和输出的可重定位程序的开发工具。连接程序在所有的源文件都被编译或汇编之后运行。</p><p>**Locator（**定位程序） A software development tool that assigns<br>physical addresses to the relocatable program produced by the linker.<br>This is the last step in the preparation of software for execution by an<br>embedded system and the resulting file is called an executable. In some<br>cases, the locator&quot;s function may be hidden within the linker.<br>一种分配物理地址给连接程序处理过的可重定位程序的软件开发工具。这是准备一个软件在嵌入式系统中运行的最后一步，并且结果文件叫做可执行的。在一些情况下，定位程序功能隐藏在连接程序中。</p><p><strong>logic analyzer</strong>（逻辑分析仪） A hardware debugging tool that can be<br>used to capture the logic levels (0 or 1) of dozens, or even hundreds,<br>of electrical signals in real-time. Logic analyzers can be quite helpful<br>for debugging hardware problems and complex processor-peripheral<br>interactions.<br>一种硬件调试工具，能捕获实时电信号的许多逻辑电平（0或1），逻辑分析仪在调试硬件问题和复杂的处理外设交互时相当有用。</p><p><strong>M</strong></p><p><strong>memory map</strong>（内存映射） A table or diagram containing the name and<br>address range of each peripheral addressable by the processor within the<br>memory space. Memory maps are a helpful aid in getting to know the<br>target.<br>一个在内存空间中的，包含每个外设的名字和可由处理器设置的地址范围的表格或图表。内存映射有助于了解目标机情况。</p><p><strong>memory-mapped I&#x2F;O</strong>（内存映射I&#x2F;O） An increasingly common hardware<br>design methodology in which I&#x2F;O devices are placed into the memory space<br>rather than the I&#x2F;O space. From the processor&quot;s point of view,<br>memory-mapped I&#x2F;O devices look very much like memory devices.<br>一种日益流行的硬件设计方法，在这种方法中，I&#x2F;O设备被放置在内存空间而不是I&#x2F;O空间。从处理器的观点看，内存映射I&#x2F;O设备看上去很象内存一样。</p><p><strong>memory space</strong>（内存空间） A processor&quot;s standard address space.<br>Contrast with I&#x2F;O space. 一个处理器的标准地址空间。相对I&#x2F;O空间。</p><p><strong>Microcontroller</strong>（微控制器） A microcontroller is very similar to a<br>microprocessor. The main difference is that a microcontroller is<br>designed specifically for use in embedded systems Microcontrollers<br>typically include a CPU, memory (a small amount of RAM and&#x2F;or ROM), and<br>other peripherals on the same chip. Common examples are the 8051,<br>Intel&quot;s 80196, and Motorola&quot;s 68HCxx series.<br>微控制器很像微处理器。主要的差别在于微控制器被特殊设计用在嵌入式系统中。微控制器典型地包括CPU、内存（很小的RAM或ROM），还有其他的外设，它们在同一块芯片上。常见的例子是：8051、Intel80196、Motorola68HCxx系列。</p><p><strong>Microprocessor</strong>（微处理器） A piece of silicon containing a<br>general-purpose CPU. The most common examples are Intel&quot;s 80x86 and<br>Motorola&quot;s 680x0 families.<br>一片包含通用CPU的硅片。常见的例子是：Intel80x86、Motorola 680x0系列。</p><p><strong>Monitor</strong>（监视器） In the context of this book, a debug monitor.<br>However, there is a second meaning for this word that is associated with<br>intertask communication. In that context, a monitor is a language-level<br>synchronization feature.<br>在这本书的上下文中，是指调试监视器。然而，第二个意思与任务间通讯相关联。在那个上下文中，监视器是高级同步机制的特性。</p><p><strong>Multiprocessing</strong>（多处理） The use of more than one processor in a<br>single computer system. So-called &quot;multiprocessor systems&quot; usually<br>have a common memory space through which the processors can communicate<br>and share data. In addition, some multiprocessor systems support<br>parallel processing.<br>在单个的计算机系统中有多个处理器。被叫作”多处理器系统”的一般有公用的内存空间，处理器通过它们进行通讯和共享数据。另外，一些多处理器系统支持并行处理。</p><p><strong>Multitasking</strong> （多任务） The execution of multiple software routines<br>in pseudo-parallel. Each routine represents a separate &quot;thread of<br>execution&quot; and is referred to as a task. The operating system is<br>responsible for simulating parallelism by parceling out the processor&quot;s<br>time.<br>伪并行运行的多个软件程序。每一个程序表现得像分开的”执行的线程”并且被看作是一个任务。操作系统通过分配处理器时间来模拟并行方式。</p><p><strong>Mutex</strong>（互斥） A data structure for mutual exclusion, also known as a<br>binary semaphore. A mutex is basically just a multitasking-aware binary<br>flag that can be used to synchronize the activities of multiple tasks.<br>As such, it can be used to protect critical sections of the code from<br>interruption and shared resources from simultaneous use.<br>表现互斥现象的数据结构，也被当作二元信号灯。一个互斥基本上是一个多任务敏感的二元信号，它能用作同步多任务的行为，它常用作保护从中断来的临界段代码并且在共享同步使用的资源。</p><p><strong>mutual exclusion</strong>（互斥现象） A guarantee of exclusive access to a<br>shared resource. In embedded systems, the shared resource is typically a<br>block of memory, a global variable, or a set of registers. Mutual<br>exclusion can be achieved with the use of a semaphore or mutex.<br>唯一访问共享资源的保证。在嵌入式系统中，共享的资源典型的有内存块或寄存器组。互斥现象能由使用信号灯或互斥完成。</p><p><strong>N</strong></p><p><strong>NVRAM</strong> Non-Volatile Random-Access Memory. A type of RAM that retains<br>its data even when the system is powered down. NVRAM frequently consists<br>of an SRAM and a long-life battery.<br>非易失的随机访问存储器。一种能在系统关机的情况下保持它的数据的RAM。NVRAM常常由SRAM和长寿命电池组成。</p><p><strong>O</strong></p><p><strong>OTP</strong> See one-time programmable. object code（目标代码） A set of<br>processor-readable opcodes and data. The output of compilers,assemblers,<br>linkers, and locators are files containing object code.<br>处理器能读的操作码和数据。编译器、汇编器、连接器和定位器的输出文件都含有目标代码。</p><p><strong>object file</strong>（目标文件） A file containing object code. The output of<br>a compiler or assembler. 包含目标代码的文件。编译器或汇编器的输出。</p><p><strong>one-time programmable</strong>（一次可编程的） Any programmable device, like<br>a PROM, that can be programmed just once by the end user. However, this<br>term is used almost exclusively to refer to microcontrollers with<br>on-chip PROM.<br>任一可编程的设备，像PROM，仅仅能被最终用户编程一次。然而，这个术语一般被专有地使用在拥有片上PROM的微控制器上。</p><p><strong>opcode</strong> A sequence of bits that is recognized by the processor as one<br>of the instructions in its instruction set.<br>一串被处理器验证过的二进制位的序列，它作为其指令集的一个子集。</p><p><strong>operating system</strong>（操作系统） A piece of software that makes<br>multitasking possible. An operating system typically consists of a set<br>of function calls, or software interrupts, and a periodic clock tick.<br>The operating system is responsible for deciding which task should be<br>using the processor at a given time and for controlling access to shared<br>resources.<br>使多任务能够实现的一个软件。一个操作系统典型地由一个函数调用集、软件中断和定期时钟周期组成。一个操作系统负责决定哪一个任务在给定的时间将使用处理器，并且控制对共享资源的访问。</p><p><strong>Oscilloscope</strong>（示波器） A hardware debugging tool that allows you to<br>view the voltage on one or more electrical lines. For example, you might<br>use an oscilloscope to determine if a particular interrupt is currently<br>asserted.<br>一种硬件调试工具，它让你能观察到一个或更多电路上的电压。例如：如果一个特殊的中断发生，你可以用一个示波器去检测它。</p><p><strong>P</strong></p><p><strong>PROM</strong>（可编程只读存储器） Programmable Read-Only Memory. A type of<br>ROM that can be written (programmed) with a device programmer. These<br>memory devices can be programmed only once, so they are sometimes<br>referred to as write-once or one-time programmable devices.<br>可编程只读存储器。能被设备编程器写的一种ROM。这种内存设备可以被编程一次，所以它们有时被作为写一次或一次性编程设备来看待。</p><p><strong>parallel processing</strong>（并行进程） The ability to apply two or more<br>processors to a single computation.<br>一种在单个计算机上运行两个或多个程序的能力。</p><p><strong>Peripheral</strong> （外设） A piece of hardware other than the processor,<br>usually memory or an I&#x2F;O device. The peripheral may reside within the<br>same chip as the processor, in which case it is called an internal<br>peripheral.<br>一种不同于处理器的硬件设备，常指内存或I&#x2F;O设备。外设经常和处理器在一片芯片上，在这种情况下，它被称为集成外设。</p><p><strong>physical address</strong>（物理地址） The actual address that is placed on<br>the address bus when accessing a memory location or register.<br>当访问内存位置或寄存器时，在地址总线上的真实的地址。</p><p><strong>Preemptive</strong>（抢先） A scheduler is said to be preemptive if it allows<br>the running task to be suspended when a higher-priority task becomes<br>ready. Non-preemptive schedulers are easier to implement but less<br>appropriate for embedded systems.<br>当一个高优先级的任务准备好时，充许正在运行的任务被挂起的调度策略被称为优先。无优先的调度策略更容易实现一些但适合在嵌入式系统中使用。</p><p><strong>Polling</strong>(轮询) A method of interfacing with hardware that involves<br>repeatedly reading a status register until the device has reached the<br>awaited state. Device drivers are either polling or interrupt-driven,<br>with the latter being more generally preferred.<br>一种硬件交互方法，不断读状态寄存器，直到设备进入等待状态。设备驱动程序不是轮询的就是中断驱动的，后一种越来越成为首选的。</p><p><strong>Priority</strong>（优先） The relative importance of one task compared to<br>another. 一个任务与其他任务相比的重要关系。</p><p><strong>priority inversion</strong>（优先转置） An unwanted software situation in<br>which a high-priority task is delayed while waiting for access to a<br>shared resource that is not even being used at the time. For all<br>practical purposes, the priority of this task has been lowered during<br>the delay period.<br>一种不希望发生的软件状态，在此状态一个高优先级任务因为等待访问一个那时不再使用的共享资源而被延迟。在所有的实践目标中，这个任务的优先级在延迟周期内都被降低。</p><p><strong>Process</strong>（进程） A word that is often confused with task or thread.<br>The crucial distinction is that all of the tasks in a system share a<br>common memory space. Processes, on the other hand, always have their own<br>private memory space. Processes are common in multi-user systems but are<br>rarely, if ever, found in embedded systems.<br>这个名词经常与任务或线程混淆。至关重要的差别在于系统中的所有任务共享公共的内存空间。进程，另一方面，常常有它们自己的私有内存空间。进程在多用户系统中，但少有地，如有可能，也可在嵌入式系统中。</p><p><strong>Processor</strong>（处理器） A generic term that does not distinction between<br>microprocessor, microcontroller, and digital signal processor.<br>一个对于微处理器、微控制器他数字信号处器无差别的通用术语。</p><p><strong>processor family</strong>（处理器族） A set of related processors, usually<br>successive generations from the same manufacturer. For example, Intel&quot;s<br>80x86 family began with the 8086 and now includes the 80186, 286, 386,<br>486, Pentium, and many others. The later models in a family are<br>typically backwards-compatible with the ones that came before.<br>一个相关的处理器集，常常连续地从一个生产商产生。例如：Intel&quot;s<br>80x86族开始从8086开始，现在有80186, 286, 386, 486,<br>Pentium及其他。在一个族中，稍后的产品典型地向后兼容在它以前生产的产品。</p><p><strong>processor-independent</strong>（处理器无关） A piece of software that is<br>independent of the processor on which it will be run. Most programs that<br>can be written in a high-level language are processor-independent.<br>Contrast with processor-specific.<br>一个与处理器无关的，并能在其上运行的软件。大多数用高级语言编写程序是处理器无关的。相对于处理器定制。</p><p><strong>processor-specific</strong>（处理器定制） A piece of software that is highly<br>dependent on the processor on which it will be run. Such code must<br>usually be written in assembly language. Contrast with<br>processor-independent.<br>一个高度依赖处理器的软件，在上其才能运行。一些代码必须用汇编语言编写。相对于处理器无关。</p><p><strong>Profiler</strong>（明细观察程序） A software development tool that collects<br>and reports execution statistics for your programs. These statistics<br>include the number of calls to each subroutine and the total amount of<br>time spent within each. This data can be used to learn which subroutines<br>are the most critical and, therefore, demand the greatest code<br>efficiency.<br>一种报告你的程序运行统计数据的软件调试工具。这些统计数据包括调用每个子程序的次数和用去的时间。这些数据常被用来了解哪些子程序是最关键的，并且，由此要求使最好的代码有效率。</p><p>program counter See instruction pointer.</p><p><strong>R</strong></p><p><strong>RAM</strong>（随机访问存储器） Random-Access Memory. A broad classification<br>of memory devices that includes all devices in which individual memory<br>locations may be read or written as required.<br>随机访问存储器。一个包含了所有每个地址能被按需读写的存储设备的粗略分类。</p><p><strong>RISC</strong>（精简指令集计算机） Reduced Instruction Set Computer. Describes<br>the architecture of a processor family. RISC processors generally<br>feature fixed-length instructions, a load-store memory architecture, and<br>a large number of general-purpose registers and&#x2F;or register windows. The<br>MIPS processor family is an excellent example. Contrast with CISC.<br>精简指令集计算机。一个处理器族的描述。RISC处理器一般的特征是固定长度的指令集，一个负载储备存储结构，和大量通用寄存器，及寄存器窗口。MIPS处理器族是极好的例子。相对CISC而言。</p><p><strong>ROM</strong>（只读存储器） Read-Only Memory. A broad classification of memory<br>devices that includes all devices in which the individual memory<br>locations may be read, but not written.<br>只读存储器。一个包括所的的每个地址只能被读，不能被写的存储器的大概分类。</p><p><strong>ROM emulator</strong>（ROM模拟器） A debugging tool that takes the place<br>of-or emulates-the ROM on your target board. A ROM emulator acts very<br>much like a debug monitor, except that it includes its own serial or<br>network connection to the host.<br>一种在你的目标板上代替或模拟ROM的调试工具。ROM模拟器动作起来象一个除错监视器，除了它包含自己连到主机上的串口或网络外。</p><p><strong>ROM monitor</strong> See debug monitor.</p><p><strong>RTOS</strong>（实时操作系统） Real-Time Operating System. An operating system<br>designed specifically for use in real-time systems.<br>实时操作系统。一种被特殊设计来用在实时系统中的操作系统。</p><p><strong>race condition</strong>（竞争状态） A situation in which the outcome of a<br>program may be affected by the exact order in which the instructions are<br>executed. Race conditions are only an issue where interrupts and&#x2F;or<br>preemption are possible and where critical sections exist.<br>一种程序运行的结果可能被指令执行的顺序影响的情形。竞争状态仅仅有一种情况下产生，在此处中断或（和）优先抢占是充许的并且有一个临界区存在。</p><p><strong>real-time system</strong>（实时系统） Any computer system, embedded or<br>otherwise, that has deadlines. The following question can be used to<br>distinguish real-time systems from the rest: &quot;Is a late answer as bad,<br>or even worse, than a wrong answer?&quot; In other words, what happens if<br>the computation doesn&quot;t finish in time? If nothing bad happens, it&quot;s<br>not a real-time system. If someone dies or the mission fails, it&quot;s<br>generally considered &quot;hard&quot; real-time, which is meant to imply that<br>the system has &quot;hard&quot; deadlines. Everything in between is &quot;soft&quot;<br>real-time.<br>任何计算机系统，嵌入的或其他的，有一个死线。以下的问题可经被用来区分实时系统与其他的系统：”是迟到的回答坏，还是一个错误的回答坏？”换句话说，如果计算机没有在指定时间内完成它的工作会发生什么？如果什么也没有发生，它不是一个实时系统。如果一些人死或任务失败，它被认为是”硬”实时系统，意思是系统有一个”硬”死线。介于两者之间的是”软”实时系统。</p><p><strong>Recursive</strong>（递归） Said of software that calls itself. Recursion<br>should generally be avoided in an embedded system, since it frequently<br>requires a large stack.<br>自己调用自己的程序的说法。递归一般在嵌入式系统中是不充许的，因为它常常占有大量的堆栈空间。</p><p><strong>Reentrant</strong>（可再入的） Said of software that can be executed multiple<br>times simultaneously. A reentrant function can be safely called<br>recursively or from multiple tasks. The key to making code reentrant is<br>to ensure mutual exclusion whenever accessing global variables or shared<br>registers.<br>可同时多次运行的程序的说法。可再入的函数可以被安全地递归调用或由多任务多次调用。使代码可再入的关键在于确保在访问全局变量或共享寄存器时互斥现象发生。</p><p><strong>Register</strong>（寄存器） A memory location that is part of a processor or<br>an I&#x2F;O device. In other words, it&quot;s not normal memory. Generally, each<br>bit or set of bits within the register controls some behavior of the<br>larger device.<br>是处理器或I&#x2F;O设备一部分的储存器的地址。换句话说，不是标准的储存器。一般地，在寄存器控制每一二进制位或二进制位的集控制大量设备的一些行为。</p><p><strong>Relocatable</strong>（可重定位的） A file containing object code that is<br>almost ready for execution on the target. The final step is to use a<br>locator to fix the remaining relocatable addresses within the code. The<br>result of that process is an executable.<br>包含几乎可以准备好在目标机上运行的目标代码的文件。最后一步是使用定位程序去整理保留在代码中的可重定位地址。这个步骤的结果是一个可执行的程序。</p><p><strong>reset address</strong>（重启地址） The address from which the first<br>instruction will be fetched after the processor is powered on or reset.<br>一个处理器上电或重启后第一个指令能被从之取出来的地址。</p><p><strong>reset code</strong>（重启代码） A small piece of code that is placed at the<br>reset address. The reset code is usually written in assembly language<br>and may simply be the equivalent of &quot;jump to the startup code.&quot;<br>一段被放置在重启地址的代码。重启代码一般用汇编语言编写并且可能相当简单，只是与”跳转到开始代码”这样的意思相同。</p><p><strong>reset vector</strong> See reset address.</p><p><strong>S</strong></p><p><strong>SRAM</strong>（静态随机访问储存器） Static Random-Access Memory. A type of<br>RAM that retains its contents as long as the system is powered on. Data<br>stored in an SRAM is lost when the system is powered down or reset.<br>静态随机访问储存器。一种在系统上电时以保持它的内容的储存器。当系统断电或重启时，保存在SRAM中的内容将丢失。</p><p><strong>Scheduler</strong>（调度程序） The part of an operating system that decides<br>which task to run next. This decision is based on the readiness of each<br>task, their relative priorities, and the specific scheduling algorithm<br>implemented.<br>操作系统中决定下一次哪个任务运行的那部分。决定基于每一个任务的就绪，它们的优先级关系，和特殊调度算法的实现。</p><p><strong>Semaphore</strong>（信号量） A data structure that is used for intertask<br>synchronization. Semaphores are usually provided by the operating<br>system. 用于进程间同步的数据结构。信号灯常常由操作系统提供。</p><p><strong>Simulator</strong>（仿真器） A debugging tool that runs on the host and<br>pretends to be the target processor. A simulator can be used to test<br>pieces of the software before the embedded hardware is available.<br>Unfortunately, attempts to simulate interactions with complex<br>peripherals are often more trouble than they are worth.<br>一种运行在主机上，装作目标机处理器的调试工具。仿真器一般用来测试嵌入式硬件可用之前的软件。不幸地，与模拟与复杂地外设进行交互的尝试常常比它们做到的更差。</p><p><strong>software interrupt</strong>（软件中断） An interruption of a program that is<br>initiated by a software instruction. Software interrupts are commonly<br>used to implement breakpoints and operating system entry points. Unlike<br>true interrupts, they occur synchronously with respect to program<br>execution. In other words, software interrupts always occur at the<br>beginning of an instruction execution cycle.<br>由软件指令发起的的一个程序的中断。软件中断被用来实现中断点他操作系统进入点。不象真实的中断，那些中断在不防碍程序执行时同步发生。换句话说，软件中断常常在指令运行周期的开始发生。</p><p><strong>Stack</strong>（堆栈） An area of memory that contains a last-in-first-out<br>queue of storage for parameters, automatic variables, return addresses,<br>and other information that must be maintained across function calls. In<br>multitasking situations, each task generally has its own stack.<br>一个包含后进先出队列的内存区域，用来存储参数、自动变量、返回地址和其他一些必须在函数调用中进行维护的信息。在多任务情况下，每一个任务一般都有自己的堆栈区。</p><p><strong>stack frame</strong>（堆栈帧） An area of the stack associated with a<br>particular function call. 一个关联特殊函数调用的堆栈区域。</p><p><strong>startup code</strong>（启动代码） A piece of assembly language code that<br>prepares the way for software written in a high-level language. Most<br>C&#x2F;C++ cross-compilers come with startup code that you can modify,<br>compile, and link with your embedded programs.<br>一个汇编语言代码，它为高级语言写的软件准备好运行的前期工作。大多数C&#x2F;C++交叉编译器在你可以修改、编译他连接你的嵌入式程序时与启动代码一起来到。</p><p><strong>T</strong></p><p><strong>Target</strong>（目标机） Another name for the embedded system. This term is<br>usually used during software development, to distinguish the embedded<br>system from the host with which it communicates.<br>嵌入式系统的另一个名字。这个术语常常在软件开发期间使用，用来区别与嵌入式系统通讯的主机。</p><p><strong>Task</strong>（任务） The central abstraction of an operating system. Each<br>task must maintain its own copy of the instruction pointer and<br>general-purpose registers. Unlike processes, tasks share a common memory<br>space and must be careful to avoid overwriting each other&quot;s code and<br>data.</p><p><strong>Thread</strong>（线程） Another name for a task. This name is more common in<br>operating systems that support processes. A task is simply a thread in a<br>single-process system.</p><p><strong>Tracepoint</strong> （跟踪点） Like a breakpoint except that a counter is<br>incremented rather than stopping the program. Tracepoints are not<br>supported by all debugging tools.<br>象中断点，除了停止程序时，计数器还被增加外。跟踪点不是被所有的调试工具支持。</p><p><strong>Trap</strong>（陷入） An interruption of a program that is triggered by the<br>processor&quot;s own internal hardware. For example, the processor might<br>trap if an illegal opcode is found within the program. Compare with<br>software interrupt.<br>一个由处理器内部硬件触发的程序中断。例如，处理器可能在一个错误的代码在程序中被发现时陷入。对比软件中断。</p><p><strong>V</strong></p><p><strong>volatile</strong>（动态） A value that may change without the intervention of<br>software is said to be volatile. For example, values within the<br>registers of some I&#x2F;O devices may change in response to external events.<br>C&quot;s volatile keyword should be used to warn your compiler about any<br>pointers that point to such registers. This will ensure that the actual<br>value is reread each time the data is used.<br>一个可能不需要软件的的干涉就可改变的值被叫作动态。例如：在一些I&#x2F;O设备的寄存器的值可能在响应外部事件时被改变。C语言中的volatile关键字被用来警告你的编译器那是一个指向一些寄存器的指针，请不要优化它。这个将确认在数据使用中的每一时间实际的值是要重新读入的。</p><p><strong>W</strong></p><p><strong>watchdog timer</strong>（看门狗定时器） A hardware timer that is periodically<br>reset by software. If the software crashesor hangs, the watchdog timer<br>will expire, and the entire system will be reset automatically.<br>一种由软件定时重设的硬件定时器。如果软件被破坏而挂起，看门狗定时器将超时，整个系统将自动重启。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/03/The-charm-of-photography/"/>
    <url>/2025/09/03/The-charm-of-photography/</url>
    
    <content type="html"><![CDATA[<h3 id="The-charm-of-photography"><a href="#The-charm-of-photography" class="headerlink" title="The-charm-of-photography"></a>The-charm-of-photography</h3><p>摄影</p><h1 id="相机拍摄知识"><a href="#相机拍摄知识" class="headerlink" title="相机拍摄知识"></a>相机拍摄知识</h1><ul><li><p>相机结构的发展:</p></li><li><p>[[镜头(LENS)]{.underline}](onenote:#摄影&amp;section-id&#x3D;{3183F192-B982-4C5B-83D3-A500B097B0FD}&amp;page-id&#x3D;{1381465D-D783-4166-8F67-4265A0BB0A78}&amp;object-id&#x3D;{72A05052-561B-44B5-B2C3-199BD7A9711C}&amp;27&amp;base-path&#x3D;C:\Users\Win\Documents\OneNote 笔记本\我的笔记本\生活常识.one)</p></li><li><p>[[专业名词]{.underline}](onenote:#摄影\航拍&amp;section-id&#x3D;{3183F192-B982-4C5B-83D3-A500B097B0FD}&amp;page-id&#x3D;{1381465D-D783-4166-8F67-4265A0BB0A78}&amp;object-id&#x3D;{00B51A1B-23BA-4FB1-9DFC-2FF61DBB596B}&amp;FE&amp;base-path&#x3D;C:\Users\Win\Documents\OneNote 笔记本\我的笔记本\生活常识.one)</p></li><li><p>[[专业功能]{.underline}](onenote:#摄影\航拍&amp;section-id&#x3D;{3183F192-B982-4C5B-83D3-A500B097B0FD}&amp;page-id&#x3D;{1381465D-D783-4166-8F67-4265A0BB0A78}&amp;object-id&#x3D;{96BA7BCA-1D5C-4B9E-90AD-3E506A06FE67}&amp;35&amp;base-path&#x3D;C:\Users\Win\Documents\OneNote 笔记本\我的笔记本\生活常识.one)</p></li></ul><blockquote><p> </p><p>古老的针孔相机结构:</p><p>现代机械相机结构</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><blockquote><p>镜头(LENS):</p><p>【广角、标准、长焦、终于有人讲明白什么焦段拍照最出片了！】<a href="https://www.bilibili.com/video/BV1wYwreJETm?vd_source=5767586c517a3d55d7f62e9806352116">[https://www.bilibili.com/video/BV1wYwreJETm?vd_source&#x3D;5767586c517a3d55d7f62e9806352116]{.underline}</a></p><p>WIDE:广角:</p></blockquote><ul><li><p>焦距：通常为24mm到35mm左右（全画幅相机）。</p></li><li><p>特点：</p></li><li><p>视野广阔，适合拍摄大场景、风景或多人合影。</p></li><li><p>可以营造出夸张的透视效果，增强空间感。</p></li><li><p>适用场景：风光摄影、建筑摄影、街头摄影。</p></li></ul><blockquote><p> </p><p>UW:超广角:</p></blockquote><ul><li>超广角镜头是一种用于相机或摄像机的特殊镜头，具有极宽的视角，通常大于85度。这种镜头设计使得在拍摄时能涵盖更广阔的景象，特别适合用于风景、建筑以及集体照等需要展现大面积场景的照片或视频。</li></ul><blockquote><p> </p><p>TELE*5X:长焦(定焦和变焦,下面为变焦标准镜头)</p></blockquote><ul><li><p>焦距：通常为70mm到300mm以上（全画幅相机）。</p></li><li><p>特点：</p></li><li><p>能够拉近被摄物体，适合拍摄远处的景物或人像。</p></li><li><p>压缩空间感，使背景虚化效果更好。</p></li><li><p>适用场景：野生动物摄影、体育赛事、人像摄影。</p></li></ul><!-- --><ul><li><img src="/media/image4.png">{width&#x3D;”6.659722222222222in”<br>height&#x3D;”6.222222222222222</li></ul><h2 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词:"></a>专业名词:</h2><h2 id="拍照模式"><a href="#拍照模式" class="headerlink" title="拍照模式:"></a>拍照模式:</h2><blockquote><p>街拍\夜景(高ISO,低快门速度)\人脸(大光圈)\全景(广角镜头)\视频录像\超广角</p></blockquote><blockquote><p>HDR高动态范围:High Dynamic<br>Range,主要作用是通过结合不同曝光的照片，生成一张包含更多细节和更宽广的亮度范围的照片,HDR能够捕捉到更多的亮部和暗部细节，使得在强光和阴影中都能保留细节(比如在亮暗差距明显的环境下,相机拍摄的画面要么偏亮要么偏暗,并且会失去一些色彩信息,通过HDR可以更有冲击力)</p></blockquote><blockquote><p>微距模式:专门用于近距离拍摄小物体或者表面细节，如昆虫、花朵等。具有高分辨率和较长的最近对焦距离。</p></blockquote><blockquote><p>移轴(Tilt shift lens):</p><p>Tilt 控制镜头仰俯和倾角</p><p>Shift控制镜头左右</p><p>调整完,焦平面和和像场存在夹角,这样远近景深,就会变为左右&#x2F;上下景深(沙姆定律),这时候扭动对焦环就会发现很难对在同一平面的内的物体对焦拍清晰</p><p>因为他们都不在一个平面上,这就导致同一时刻只能有一小部分是清晰的,又因为这一特性,移轴镜头的拍照范围会比普通相机广这就能拍出舍弃的效果(朦胧的镜头感),比如拍照镜子的人,但相机不会被拍进去(向左右移轴)</p><p>【整个世界都变成玩具？！辗转多地拍摄，玩转移轴摄影】</p><p><a href="https://www.bilibili.com/video/BV1uZ4y1y7PV?vd_source=5767586c517a3d55d7f62e9806352116">[https://www.bilibili.com/video/BV1uZ4y1y7PV?vd_source&#x3D;5767586c517a3d55d7f62e9806352116]{.underline}</a></p><p>移轴镜头能把大世界拍出微缩效果。其实是来自人们对微距摄影感受的一种迁移。在微距摄影中，超近距离产生了极浅的景深，呈现在画面上就是”只有一条线附近是清晰的，其他都是模糊的”效果。而用普通镜头拍摄大世界，不可能拍出这种效果。这时候就需要移轴镜头，来呈现和微距摄影类似的景深效果，这样就让人产生了”微缩世界”的感觉,最初被用在拍高大建筑上,<br>因为在拍高打建筑时,为了拍全貌,镜头要向上抬起,这样就会出现上小下大的畸变,移轴镜头则可以在机身保持不变的情况下实现镜头倾斜和移动,因为人视觉系统加上心智模型,在看远景的时候周围物体会清晰(眼睛看远处时,可以类似于广角镜头因为焦点视野里面的物体多了),在看近景的时候,就会出现观察的事物清晰,旁边的事物模糊的情况(所以出现浅景深的轻快下,小脑瓜就会以为在拍近景)</p></blockquote><blockquote><p>慢动作拍摄:一种视频拍摄技术，通过以高于正常帧率（Frame Per Second,<br>FPS）记录视频，使播放时(先1s拍两张,之后播放的时候再1s播放一张,达到慢放的效果)的动作显得更缓慢。这种技术可以捕捉到肉眼难以看到的细节，常用于体育、舞蹈、自然摄影等领域。慢动作视频可能会导致声音与画面不同步，需要在后期处理时进行对齐</p><p>帧率（FPS）：慢动作拍摄的关键是使用高于正常帧率的模式。例如：</p><p>1080p @ 60 FPS</p><p>4K @ 120 FPS 或更高</p><p>选择合适的帧率：根据你的需求选择，帧率越高，动作越慢。但高帧率也会占用更多存储空间。</p><p>快门速度与帧率相关联：</p><p>帧率为60 FPS时，快门速度通常为1&#x2F;60 秒。</p><p>高帧率（如120 FPS）时，快门速度会相应降低到1&#x2F;120 秒。</p></blockquote><blockquote><p>延时摄影:</p><p>【摄影科普】什么是延时摄影？】<a href="https://www.bilibili.com/video/BV12J4m1T74t?vd_source=5767586c517a3d55d7f62e9806352116">[https://www.bilibili.com/video/BV12J4m1T74t?vd_source&#x3D;5767586c517a3d55d7f62e9806352116]{.underline}</a></p><p>将一段长时间的画面内容浓缩在一段小素材里面(与慢动作摄影正相反,慢动作是插帧,那延迟摄影就是减帧,可以类比为快进)</p><p>除了快进还有什么方法实现延迟摄影-&gt;还可以在一定时间内拍指定帧数的图片,下面举例:</p><p>将一个25帧率5min的素材压缩到25帧5s的视频里1.可以将视频加速播放60倍<br>2.可以从素材中,按等时间间隔抽取25*5张画面</p><p>延迟摄影正是这个原理(按照设定的时间间隔,均匀的依次记录静态画面),也称为间隔拍摄-Timelapes<br>Photography</p><p>时间间隔计算方式:25*60*5&#x2F;(25*5)&#x3D;60<br>fps&#x2F;s,因此可以通过每隔60s取一帧达到和快进同样的要求,但由于存在间隔拍摄,所以画面会突变,一般结合长曝光,增强运动模糊效果让画面更有运动信息看起来更流畅,削弱突变感(如果拍照对象运动快或者变化大),者就要保证长曝光时间要小于快门释放间隔时间</p></blockquote><blockquote><p>长曝光:快门保持开启较长时间，一般用于拍摄夜景,以捕捉光线的变化轨迹或营造特殊的视觉效果。这种技术常用于拍摄移动物体（如车流、瀑布）或在低光环境下获得足够的光线,但要防止过曝和处理噪点</p></blockquote><blockquote><p>鱼眼:可以产生强烈的扭曲和夸张效果(无人机上常用的全景摄影),为了获取更大的视场角且不会出现边缘暗角,采用了玻璃半球为折射媒介进行采样的方式,因为入射光经过球心,所以经过一次折射后,出射光进入到空气不会发生二次偏折</p><p>推荐资料:</p><p>【鱼眼镜头如何改变了人类生活】<a href="https://www.bilibili.com/video/BV1PW4y1o7m1?vd_source=5767586c517a3d55d7f62e9806352116">[https://www.bilibili.com/video/BV1PW4y1o7m1?vd_source&#x3D;5767586c517a3d55d7f62e9806352116]{.underline}</a></p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="专业功能"><a href="#专业功能" class="headerlink" title="专业功能:"></a>专业功能:</h2><blockquote><p>光焦分离:光圈（控制进光量）和对焦系统（如自动对焦马达）在物理结构上分开配置。这种设计有助于减少机械运动对其他光学元件的影响，从而提高图像质量</p><p> </p><p>对焦(F):保证拍摄主体的清晰,分为手动对焦(MF)和自动对焦(AF(AF-A自动选择拍静止还是运动&#x2F;AF-S静物&#x2F;AF-C运动)),当拍摄主体不明显的时候,需要我们手动对焦来保证主体的清晰度</p><p>峰值对焦:峰值对焦是一种辅助对焦工具，尤其在手动模式下非常有用。当启用此功能时，相机会在检测到高对比度边缘时，在LCD屏幕上突出显示这些区域，通常用彩色轮廓或亮度变化表示。</p><p> </p><p>测光:矩阵测光\点测光\中心重点测光</p></blockquote><ul><li><p>点测光测量范围非常小，仅集中在画面中央的一个极小区域（约1%-5%的面积）。</p></li><li><p>矩阵测光通过多个传感器点（如分区矩阵）测量光线，并结合场景信息（如距离、对比度）进行综合计算。常用于复杂光源环境，适合拍摄主体位于画面任意位置的情况。</p></li><li><p>中心重点测光的测光范围集中在画面中央区域，周围区域的亮度会被弱化。适合拍摄主体位于画面中央的情况</p></li></ul><blockquote><p>快门速度(S):指相机感光元件（胶片或图像传感器）暴露在光线下的时间长度,高速快门(1&#x2F;1000<br>秒或更快)一般用于捕捉动态物体的运动(瞬间动作),低速快门（如 1&#x2F;4<br>秒或更慢）：用于拍摄动态模糊效果，例如水流等。</p><p>光圈:控制相机进光量,也影响景深(入瞳径与容许弥散圆决定</p><p>)</p></blockquote><ul><li>【爆肝两个月 |<br>用动画的方式揭开光圈和景深的秘密——掌控曝光（—）】<a href="https://www.bilibili.com/video/BV1t24y1k7Ye?vd_source=5767586c517a3d55d7f62e9806352116">[https://www.bilibili.com/video/BV1t24y1k7Ye?vd_source&#x3D;5767586c517a3d55d7f62e9806352116]{.underline}</a></li></ul><!-- --><ul><li><p>光圈越大（如f&#x2F;2.8），进入镜头的光线越多，适合在光线较弱的环境下拍摄，能够提高快门速度或降低ISO，从而获得更清晰和细腻的照片。大光圈（如f&#x2F;4）能够实现浅景深，使主体突出，背景虚化。这对于人像摄影尤为重要，可以营造出柔和的背景效果。</p></li><li><p>光圈越小（如f&#x2F;16），进入的光线较少，通常需要增加曝光时间或提高ISO来补偿，但可能会导致画面模糊或噪点增加。小光圈（如f&#x2F;8或更高）则能增加景深，使前景到背景的景物都保持清晰，适合风景摄影或团体照</p></li></ul><blockquote><p> </p><p>感光度(ISO):用于衡量相机感光元件对光线的敏感度,决定了相机在弱光环境下捕捉清晰图像的能力,但高ISO会出现噪点,影像画质,因此默认不要开太高</p><p> </p><p>曝光补偿(EV):摄影中用于调整照片整体亮度的一项技术,是指在相机的半自动模式（如光圈优先和快门优先）下，用户可以手动调整照片的整体亮度。例如，在逆光拍摄人像时，自动对焦可能会测光不准确，导致主体过暗。这时通过增加正向的EV值，可以提升主体的亮度，改善照片效果.</p><p> </p><p>在相机中，饱和度、对比度和锐度是常见的图像调整功能，用于优化照片的色彩、细节和清晰程度。</p><p>饱和度:饱和度控制照片中颜色的强度或纯度。高饱和度会使颜色更鲜艳(花朵)、更生动；低饱和度则会让颜色更柔和、更接近灰调(人像)</p><p>对比度:对比度调整照片中亮部和暗部之间的差异。高对比度会让图像中的明暗区域更加分明；低对比度则会使图像整体看起来更柔和、更接近中间色调</p><p>锐度:锐度调整照片中细节和边缘的清晰度。高锐度会让图像中的线条、纹理和细节更加清晰；低锐度则会使图像看起来模糊或柔和(磨皮)</p><p> </p><p>白平衡(WB):用于调整图像的颜色，<strong>以确保白色物体在照片中呈现为白色</strong>，并且其他颜色也能够准确还原。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/03/book-list/"/>
    <url>/2025/09/03/book-list/</url>
    
    <content type="html"><![CDATA[<h1 id="book-list"><a href="#book-list" class="headerlink" title="book-list"></a>book-list</h1><p>书单</p><p> </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录:"></a>目录:</h1><ul><li><p>[[鲁迅文学]</p></li><li><p>[[记忆迷宫&#x2F;追风筝的人&#x2F;追影子的人]</p></li><li><p>[[1984&#x2F;美丽新世界]</p></li><li><p>[[穷查理宝典]认知觉醒&#x2F;小岛经济学</p></li><li><p>[[自私的基因]</p></li><li><p>[[非暴力沟通]</p></li></ul><blockquote><p>鲁迅:狂人日记,孔乙己,闰土,啊Q正传,药</p></blockquote><blockquote><p>德国:记忆迷宫 追风筝的人,追影子的人</p></blockquote><blockquote><p>1984&#x2F;美丽新世界(乌托邦和放乌托邦)</p></blockquote><blockquote><p>穷查理宝典:</p></blockquote><ul><li><p><strong>多元思维模型</strong>：芒格主张整合数学、心理学、经济学等多学科知识，构建<br>“思维模型工具箱”，形成对问题的立体化认知。例如分析企业时，可结合复利模型、护城河理论、激励扭曲等模型。他提出的<br>Lollapalooza 效应，指多个学科模型叠加会产生非线性效果。</p></li><li><p><strong>逆向思考</strong>：秉持 “反过来想”<br>的原则，先思考哪些错误会导致失败，再寻找正确路径。投资前要明确<br>“价格与价值”<br>的本质区别，避免高估市场情绪。还可列出负面清单，规避道德风险、认知偏差等风险，也可用于生活决策，避免拖延、过度消费等低效习惯。</p></li><li><p><strong>能力圈原则</strong>：强调<br>“只打高概率的球”，仅在自己深度理解的领域行动，如可口可乐、比亚迪等商业模式清晰的企业。通过终身学习缓慢拓展认知边界，同时避免涉足技术路线模糊的领域。判断是否在能力圈内可问自己三个问题：能否用一句话解释企业核心竞争力？是否理解行业底层驱动力？能否预测<br>5 年后格局？</p></li><li><p><strong>长期主义与价值投资</strong>：坚持<br>“以合理价格买入卓越企业”，关注企业内在价值而非短期波动。买入价格应低于内在价值<br>30%，预留风险缓冲空间。利用复利效应，避免频繁交易，同时利用市场先生的情绪波动，而非被其左右。</p></li><li><p><strong>检查清单与风险管理</strong>：制定投资原则清单，优先考虑风险，测算安全边际、避免高杠杆等。决策时设置<br>24 小时冷静期，运用 10-10-10 法则，评估决策在 10 分钟、10 个月、10<br>年后的影响，优化决策流程。</p></li><li><p><strong>道德与诚信</strong>：强调<br>“诚实是最好的策略”，认为正直与声誉是长期成功的基石。在投资中，筛选企业时优先考虑管理层诚信而非短期业绩。</p></li><li><p><strong>终身学习与自我提升</strong>：芒格倡导每日阅读，涉猎跨学科经典。采用五步学习法，即锁定领域、精读、提炼模型、跨学科链接、实践验证。他本人每年阅读数百本书，其知识积累是<br>“复利增长” 的典范。</p></li></ul><blockquote><p>思考快与慢</p><p><strong>一、双系统理论：大脑的 “自动驾驶” 与 “手动模式”</strong></p><p>卡尼曼将思维分为两套系统，解释了人类决策的双重性：</p></blockquote><ul><li><p><strong>系统 1（快思考）</strong></p><ul><li><p><strong>特性：直觉、自动化、无意识，依赖经验与情绪，能耗低但易受偏差影响。</strong></p></li><li><p><strong>功能：处理日常简单任务（如识别面孔、计算 2+2），通过<br>“启发式”（经验法则）快速决策。例如，看到穿制服的人会直觉认为其<br>“可靠”，这是代表性偏差的体现。</strong></p></li><li><p><strong>局限性：易陷入锚定效应（如房地产经纪人因高价房源清单高估其他房屋价值）、可得性偏差（因近期事件高估风险）等认知陷阱。</strong></p></li></ul></li><li><p><strong>系统 2（慢思考）</strong></p><ul><li><p><strong>特性：理性、需专注、逻辑性强，能耗高但更精准，擅长处理复杂问题（如计算<br>15×78）。</strong></p></li><li><p><strong>启动条件：当系统 1<br>遇到挑战（如数据矛盾）或需深度分析时介入，但常因 “懒惰” 被系统 1<br>主导。</strong></p></li><li><p><strong>缺陷：持续使用会导致决策疲劳（如法官饭前更易拒绝保释申请），且易被系统<br>1 的替代效应干扰（用简单问题偷换复杂问题）。</strong></p></li></ul></li></ul><blockquote><p><strong>二、认知偏差的根源：系统 1 的 “思维捷径”</strong></p><p>系统 1 的启发式思维虽提高效率，却导致系统性错误：</p></blockquote><ul><li><p><strong>代表性偏差</strong></p><ul><li><strong>用刻板印象简化判断。例如，认为 “琳达既是银行职员又是女权主义者”<br>的概率高于 “琳达是银行职员”（琳达问题），忽视概率的基本规则。</strong></li></ul></li><li><p><strong>锚定效应</strong></p><ul><li><strong>初始信息对后续判断的强烈影响。实验显示，房地产经纪人看到高价房源清单后，会系统性高估其他房屋价值。</strong></li></ul></li><li><p><strong>框架效应</strong></p><ul><li><strong>同一事实的不同表述影响决策。例如，”90% 存活率” 比 “10% 死亡率”<br>更易被接受。</strong></li></ul></li><li><p><strong>WYSIATI（你所看到的就是全部）</strong></p><ul><li><strong>仅基于有限信息做判断，忽略潜在缺失数据。例如，面试时因候选人一次演讲表现优秀，就默认其具备管理能力（光环效应）。</strong></li></ul></li></ul><blockquote><p><strong>三、决策优化：驯服系统 1 的非理性</strong></p><p>卡尼曼提出以下策略，通过系统 2 的理性干预减少偏差：</p></blockquote><ul><li><p><strong>主动激活系统 2</strong></p><ul><li><p><strong>设置减速带：复杂决策前强制停顿（如 24<br>小时冷静期），避免直觉主导。</strong></p></li><li><p><strong>引入外部视角：参考标准化评分表或历史数据，而非依赖个人经验。例如，用人决策时使用结构化面试而非<br>“直觉印象”。</strong></p></li></ul></li><li><p><strong>对抗认知偏差</strong></p><ul><li><p><strong>反事实思考：质疑 “后见之明偏差”（如<br>“我早就知道会这样”），通过列举其他可能性验证判断。</strong></p></li><li><p><strong>多元信息输入：打破确认偏误，主动接触对立观点（如自由派阅读保守派新闻）。</strong></p></li></ul></li><li><p><strong>组织防错机制</strong></p><ul><li><p><strong>决策清单化：制定明确规则（如投资前测算安全边际），减少个体偏差对团队的影响。</strong></p></li><li><p><strong>峰终定律应用：在关键节点强化积极体验（如病中探望），利用记忆的<br>“峰值 - 终点” 特性优化关系维护。</strong></p></li></ul></li></ul><blockquote><p><strong>四、理论价值与现实意义</strong></p></blockquote><ul><li><p>*<em>颠覆理性人假设*</em><br>卡尼曼的研究为行为经济学奠定基础，证明人类决策常受情绪、认知局限影响，而非完全理性。例如，<strong>前景理论</strong>揭示人们对损失的痛苦感是收益快感的<br>2 倍，解释了风险厌恶行为。</p></li><li><p><strong>跨领域应用</strong></p><ul><li><p><strong>公共政策：设计 “助推” 机制（如器官捐赠默认选项）引导理性选择。</strong></p></li><li><p><strong>商业实践：利用曝光效应（重复广告增强好感）和框架效应（”节省 30%”<br>比 “支付 70%” 更有效）提升营销效果。</strong></p></li></ul></li><li><p><em><em>个体认知升级*</em><br>理解双系统运作规律后，人们可通过</em><em>刻意练习</em>*（如每日复盘决策过程）逐步拓展系统<br>2 的控制力，在关键领域实现 “慢思考主导”。</p></li></ul><blockquote><p>认知觉醒</p></blockquote><ul><li><p><strong>大脑的三重结构</strong>：人类大脑由本能脑、情绪脑、理智脑构成，分别对应生存本能、情感需求和理性决策。理智脑虽高级但力量薄弱，常被本能与情绪脑主导，导致人们<br>“避难趋易、急于求成”。</p></li><li><p><strong>在舒适区边缘成长</strong>：成长要走出舒适区，但并非一步跨到困难区，而是在舒适区边缘（拉伸区）拓展自己。在这个区域，人们既能付出努力后获得正反馈，又具有一定挑战，进步会更快。</p></li><li><p><strong>元认知</strong>：元认知是<br>“对思考的思考”，即通过反思与觉察提升自我掌控力。它像 “第三视角”<br>般监督思维与行为，帮助人跳出惯性反应。可通过每日复盘、冥想和写作等方法培养元认知，如记录触动点并关联已有知识，形成个人认知体系。</p></li><li><p><strong>消除模糊，清晰行动</strong>：焦虑与低效源于认知或行动的模糊。通过写下来明确目标、拆解步骤，能有效降低大脑的决策能耗。情绪模糊时可追问深层原因，行动模糊时应制定具体计划，学习模糊时则聚焦错题与难点。</p></li><li><p><strong>深度学习的复利效应</strong>：学习需从表层输入转向深度实践，遵循 “获取 —<br>关联 — 输出”<br>的路径。例如，阅读后用自己的语言复述、写作或教授他人，将知识缝接入认知网络。复利曲线表明，前期积累看似缓慢，但跨越拐点后将迎来爆发式成长。</p></li><li><p><strong>行动五件套</strong>：包括早起、冥想、阅读、写作和运动。早起可利用睡眠周期理论，在睡眠节点醒来，创造高效时间；冥想能提升专注力，抑制思维涣散；阅读可通向高密度思考，选书要遵循舒适区边缘法则，阅读后要实践；写作可通过输出倒逼深度思考；运动能促进神经元生长，优化大脑功能。</p></li></ul><blockquote><p> </p><p> </p><p>自私的基因:</p></blockquote><ul><li><p><strong>基因是自然选择的基本单位</strong>：自然选择的基本单位不是个体、群体或物种，而是基因。基因为了自身的延续，塑造并驱动个体的一切行为。</p></li><li><p><strong>生物是基因的生存机器</strong>：个体存在的意义在于成为基因的临时载体与传播工具。生命本质上是基因信息的延续，而非个体的荣耀。</p></li></ul><!-- --><ul><li><strong>自私的基因创造<br>“条件性利他”</strong>：基因是自私的，但为了更好地传播，有时会演化出<br>“有限利他”<br>行为。比如:群居生物中有专门负责警戒的个体,亲属之间的相互帮助.利他并非出于高尚情感，而是为了最终的自利，是一种博弈结果。</li></ul><blockquote><p>所有条件性利他行为，本质上都是基因在 “计算”<br>收益后的策略：<strong>利他是手段，基因存续是目的</strong>。利他行为的发生与否，取决于<br>“付出的成本” 与 “基因延续的收益”<br>之间的权衡，一旦条件不满足（如无亲属关联、无互惠可能、群体收益失衡），利他便会消失</p></blockquote><ul><li><p><strong>进化稳定策略（ESS）</strong>：在特定环境中，某种行为模式一旦被大多数个体采纳，就很难被少数其他策略击败，是一种经过无数次筛选后达成的<br>“局部最优” 状态，能在演化中自我维持。</p></li><li><p><strong>亲代与子代冲突本质</strong>：亲子之间虽有血缘联系，但在基因层面并非完全<br>“和谐”。父母希望合理分配资源给所有子女以保障整体基因的延续，而子女则本能地希望获得更多资源以增加自身竞争力，这种冲突是隐藏在亲情背后的生物学事实。</p></li><li><p><strong>两性冲突与性选择原理</strong>：雌雄在基因延续策略上存在差异，雌性繁殖成本高，择偶更谨慎挑剔，雄性繁殖机会多，倾向于广撒网。这种差异导致了行为上的冲突与进化上的博弈。</p></li><li><p><strong>模因（Meme）：文化的自私复制者</strong>：模因是文化中类似于基因的复制单位，如想法、旋律、时尚等。文化传播本质上是由具有自我复制、适应环境能力的模因主导，而非完全由理性控制。</p></li></ul><blockquote><p>非暴力沟通</p></blockquote><ul><li><p><strong>非暴力沟通四要素</strong>：</p><ul><li><p><strong>观察</strong>：客观描述所发生的事情，不做判断或评估，将观察与评论区分开来。例如，不说<br>“你很懒惰”，而是说 “我看到你今天没有完成分配的任务”。</p></li><li><p><strong>感受</strong>：表达自己内心的情绪体验，而不是想法。比如，当同事没有按时完成工作影响到自己时，说<br>“我感到很着急”，而不是 “你这样做很不对”。</p></li><li><p><strong>需求</strong>：认识到感受源于自身未被满足的需求，敢于说出自己的需求，同时也要理解他人的需求。例如，对伴侣说<br>“我希望你能多陪陪我，因为我需要感受到你的关心”。</p></li><li><p><strong>请求</strong>：明确表达希望他人采取的行动，以满足自己的需求，注意这不是命令或要求，而是一种开放、合作的方式。比如，对朋友说<br>“我希望你下次能提前告知我你会迟到，这样我可以更好地安排时间”。</p></li></ul></li><li><p><strong>建立连接的方法</strong>：</p><ul><li><p><strong>放下判断和预设</strong>：沟通时抛开对对方的成见、对其反应的预测等，以开放心态理解对方。</p></li><li><p><strong>真正倾听对方</strong>：不仅听对方的言语，还要关注语调、表情和身体语言，全神贯注地理解其感受和需求。</p></li><li><p><strong>表达同理心</strong>：从对方角度出发，通过重述对方的话等方式，让对方感受到被理解和尊重，如<br>“听起来你很沮丧，是因为事情没有按计划进行吗”。</p></li><li><p><strong>避免评判和指责</strong>：评判和指责会让对方产生防御心理，应寻找共同点，表达对对方情感的理解。</p></li><li><p><strong>创造安全的环境</strong>：展现出开放和接纳的态度，让对方能自由表达，不用担心被评判或批评。</p></li></ul></li></ul><blockquote></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
